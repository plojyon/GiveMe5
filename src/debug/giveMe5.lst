
/home/yon/wsFreedomStudio/GiveMe5/src/debug/giveMe5.elf:     file format elf32-littleriscv
/home/yon/wsFreedomStudio/GiveMe5/src/debug/giveMe5.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20010000

Program Header:
    LOAD off    0x00001000 vaddr 0x20010000 paddr 0x20010000 align 2**12
         filesz 0x00001a98 memsz 0x00001a98 flags rwx
    LOAD off    0x000030e0 vaddr 0x800000e0 paddr 0x800000e0 align 2**12
         filesz 0x00000000 memsz 0x00000c90 flags rw-
    LOAD off    0x00003000 vaddr 0x80000000 paddr 0x20011a98 align 2**12
         filesz 0x000000e0 memsz 0x000000e0 flags rw-
    LOAD off    0x000030e0 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x000030e0 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             0000018e  20010000  20010000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             0000102c  200101c0  200101c0  000011c0  2**6  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           000008a4  200111ec  200111ec  000021ec  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000008  20011a90  20011a90  00002a90  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             000000e0  80000000  20011a98  00003000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              00000090  800000e0  800000e0  000030e0  2**3  ALLOC
  6 .stack            00000400  80000170  80000170  000030e0  2**0  ALLOC
  7 .heap             00000800  80000570  80000570  000030e0  2**0  ALLOC
  8 .debug_info       0000e6fb  00000000  00000000  000030e0  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     000013bd  00000000  00000000  000117db  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    00000338  00000000  00000000  00012b98  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     00000218  00000000  00000000  00012ed0  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       00003989  00000000  00000000  000130e8  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        00002279  00000000  00000000  00016a71  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  00018cea  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  00018d12  2**0  CONTENTS, READONLY
 16 .debug_frame      00000838  00000000  00000000  00018d40  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20010000 l    d  .init	00000000 .init
200101c0 l    d  .text	00000000 .text
200111ec l    d  .rodata	00000000 .rodata
20011a90 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
800000e0 l    d  .bss	00000000 .bss
80000170 l    d  .stack	00000000 .stack
80000570 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__sifive-hifive1-revb_a-entry.o
20010060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
20010132 l       .init	00000000 _skip_init
200111ec l       .rodata	00000000 argv
200111f0 l       .rodata	00000000 envp
200111f4 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 giveMe5.c
00000000 l    df *ABS*	00000000 gpio.c
00000000 l    df *ABS*	00000000 mtime.c
00000000 l    df *ABS*	00000000 /tmp/cc37oFNl.o
00008000 l       *ABS*	00000000 DELAY
00000008 l       *ABS*	00000000 MSTATUS_MIE_BIT_MASK
00000080 l       *ABS*	00000000 MIE_MTIE_BIT_MASK
00000800 l       *ABS*	00000000 MIE_MEIE_BIT_MASK
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
800000e4 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 sifive_fe310-g000_hfrosc.c
2001076c l     F .text	0000001a __metal_driver_sifive_fe310_g000_hfrosc_ref
20010786 l     F .text	0000001a __metal_driver_sifive_fe310_g000_hfrosc_config_base
200107a0 l     F .text	00000014 __metal_driver_sifive_fe310_g000_hfrosc_config_offset
200107b4 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
00000000 l    df *ABS*	00000000 sifive_fe310-g000_hfxosc.c
2001086c l     F .text	0000001a __metal_driver_sifive_fe310_g000_hfxosc_ref
20010886 l     F .text	0000001a __metal_driver_sifive_fe310_g000_hfxosc_config_base
200108a0 l     F .text	00000014 __metal_driver_sifive_fe310_g000_hfxosc_config_offset
200108b4 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
00000000 l    df *ABS*	00000000 sifive_fe310-g000_pll.c
2001095c l     F .text	0000001a __metal_driver_sifive_fe310_g000_pll_pllsel0
20010976 l     F .text	0000001a __metal_driver_sifive_fe310_g000_pll_pllref
20010990 l     F .text	0000001a __metal_driver_sifive_fe310_g000_pll_divider_base
200109aa l     F .text	00000014 __metal_driver_sifive_fe310_g000_pll_divider_offset
200109be l     F .text	00000016 __metal_driver_sifive_fe310_g000_pll_config_base
200109d4 l     F .text	00000010 __metal_driver_sifive_fe310_g000_pll_config_offset
200109e4 l     F .text	00000016 __metal_driver_sifive_fe310_g000_pll_init_rate
200109fa l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_base
20010a0c l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
20011200 l     O .rodata	00000880 pll_configs
20010a1e l     F .text	0000004e get_pll_config_freq
20010a6c l     F .text	00000028 metal_sifive_fe310_g000_pll_init
20010ca0 l     F .text	000000aa find_closest_config
20010d4a l     F .text	00000132 configure_pll
20010fd0 l     F .text	00000026 use_hfxosc
00000000 l    df *ABS*	00000000 sifive_fe310-g000_prci.c
20010ff6 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_base
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 fixed-clock.c
2001112a l     F .text	00000070 __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000000 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
20011a98 l       .init_array	00000000 __fini_array_end
20011a98 l       .init_array	00000000 __fini_array_start
20011a98 l       .init_array	00000000 __init_array_end
20011a90 l       .init_array	00000000 __preinit_array_end
20011a90 l       .init_array	00000000 __init_array_start
20011a90 l       .init_array	00000000 __preinit_array_start
200110ae g     F .text	00000026 metal_clock_get_rate_hz
20010320 g     F .text	00000080 mtime_int_handler
800008b8 g       .data	00000000 __global_pointer$
80000170 g       .bss	00000000 metal_segment_bss_target_end
00000000 g       *ABS*	00000000 __metal_chicken_bit
20010270 g     F .text	0000005c gpio_output_set_c
08000000 g       .init_array	00000000 metal_segment_itim_target_start
20010070 g     F .init	0000000e __metal_synchronize_harts
800000e0 g       .bss	00000000 metal_segment_bss_target_start
20010b34 g     F .text	0000016c __metal_driver_sifive_fe310_g000_pll_get_rate_hz
00000400 g       *ABS*	00000000 __stack_size
20011a80 g     O .rodata	0000000c __metal_driver_vtable_sifive_fe310_g000_pll
20010e7c g     F .text	00000154 __metal_driver_sifive_fe310_g000_pll_set_rate_hz
8000006c g     O .data	0000000c __metal_dt_clock_2
200104f0 g     F .text	00000000 register_handler
800000d8 g     O .data	00000008 __metal_driver_vtable_fixed_clock
800000b8 g     O .data	00000004 _global_impure_ptr
200105b2 g     F .text	0000006a __libc_init_array
2001043c  w    F .text	00000000 default_handler
2001093a g     F .text	00000022 __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz
2001106e g     F .text	00000040 _metal_clock_call_all_callbacks
2001016e g     F .init	00000002 _init
2001057a g     F .text	00000038 __libc_fini_array
800000a8 g     O .data	0000000c __metal_dt_clock_4
200102cc g     F .text	00000054 gpio_output_toggle_c
80000000 g       .data	00000000 metal_segment_data_target_start
80000060 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
200103c0 g     F .text	00000000 vector_table
800000e0 g     O .bss	00000004 _global_atexit
200106a4 g     F .text	000000c8 __call_exitprocs
80000570 g       .stack	00000000 _sp
2001007e g     F .init	00000000 _start
200107c6 g     F .text	00000084 __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz
2001061c g     F .text	00000088 __register_exitproc
20010438  w    F .text	00000000 exti_handler
200110d4 g     F .text	00000048 metal_clock_set_rate_hz
20010170  w    F .init	00000000 secondary_main
20011008 g     F .text	0000002e __metal_driver_sifive_fe310_g000_prci_get_reg
200101c0 g     F .text	00000040 main
800000e0 g       .data	00000000 metal_segment_data_target_end
800000c0 g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_hfrosc
2001111c g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
200103f4  w    F .text	00000000 swi_handler
800000bc g     O .data	00000004 __metal_dt_prci_10008000
20010000 g       .init	00000000 _enter
200108c6 g     F .text	00000074 __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz
20011a98 g       *ABS*	00000000 metal_segment_itim_source_start
2001016e g     F .init	00000002 _fini
20010544 g     F .text	0000000a atexit
20010a94 g     F .text	000000a0 __metal_driver_sifive_fe310_g000_pll_init
80000078 g     O .data	0000000c __metal_dt_clock_5
20011036 g     F .text	00000038 __metal_driver_sifive_fe310_g000_prci_set_reg
2001119a g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
20010440 g     F .text	00000000 _panic_handler
20011a98 g       *ABS*	00000000 metal_segment_data_source_start
8000009c g     O .data	0000000c __metal_dt_clock_1
20010200 g     F .text	00000070 gpio_output_enable_c
2001047c g     F .text	00000000 enable_timer_interrupts
2001054e g     F .text	0000002c exit
200111b8 g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
200104b4 g     F .text	00000000 set_time_cmp
200111da g     F .text	00000012 _exit
20010444 g     F .text	00000000 enable_global_interrupts
800000c8 g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_hfxosc
2001006e  w      .init	00000000 __register_frame_info
2001084a g     F .text	00000022 __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz
80000090 g     O .data	0000000c __metal_dt_clock_3
80000084 g     O .data	0000000c __metal_dt_clock_6
800000d0 g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_prci
00000000 g       *ABS*	00000000 __metal_boot_hart



Disassembly of section .init:

20010000 <_enter>:
_enter():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20010000:	5fff1197          	auipc	gp,0x5fff1
20010004:	8b818193          	addi	gp,gp,-1864 # 800008b8 <__global_pointer$>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20010008:	00000297          	auipc	t0,0x0
2001000c:	05828293          	addi	t0,t0,88 # 20010060 <early_trap_vector>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20010010:	30529073          	csrw	mtvec,t0
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20010014:	00000293          	li	t0,0
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:33
    beqz t0, 1f
20010018:	00028463          	beqz	t0,20010020 <_enter+0x20>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2001001c:	7c105073          	csrwi	0x7c1,0
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20010020:	dfff0117          	auipc	sp,0xdfff0
20010024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20010028:	dfff0097          	auipc	ra,0xdfff0
2001002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:53
    beqz ra, 1f
20010030:	00008363          	beqz	ra,20010036 <_enter+0x36>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:54
    jalr ra
20010034:	9082                	jalr	ra
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20010036:	f1402573          	csrr	a0,mhartid
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:61
    li a1, 0
2001003a:	4581                	li	a1,0
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:62
    li a2, 0
2001003c:	4601                	li	a2,0
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:63
    call _start
2001003e:	2081                	jal	2001007e <_start>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20010040:	dfff0097          	auipc	ra,0xdfff0
20010044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:69
    beqz ra, 1f
20010048:	00008363          	beqz	ra,2001004e <_enter+0x4e>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:70
    jalr ra
2001004c:	9082                	jalr	ra
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2001004e:	00000297          	auipc	t0,0x0
20010052:	00c28293          	addi	t0,t0,12 # 2001005a <_enter+0x5a>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20010056:	30529073          	csrw	mtvec,t0
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2001005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:79
     j 1b
2001005e:	bff5                	j	2001005a <_enter+0x5a>

20010060 <early_trap_vector>:
early_trap_vector():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20010060:	342022f3          	csrr	t0,mcause
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:90
    csrr t1, mepc
20010064:	34102373          	csrr	t1,mepc
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:91
    csrr t2, mtval
20010068:	343023f3          	csrr	t2,mtval
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:92
    j early_trap_vector
2001006c:	bfd5                	j	20010060 <early_trap_vector>

2001006e <__register_frame_info>:
__register_frame_info():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2001006e:	8082                	ret

20010070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20010070:	1141                	addi	sp,sp,-16
20010072:	c622                	sw	s0,12(sp)
20010074:	0800                	addi	s0,sp,16
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20010076:	0001                	nop
20010078:	4432                	lw	s0,12(sp)
2001007a:	0141                	addi	sp,sp,16
2001007c:	8082                	ret

2001007e <_start>:
_start():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2001007e:	8406                	mv	s0,ra
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20010080:	5fff1197          	auipc	gp,0x5fff1
20010084:	83818193          	addi	gp,gp,-1992 # 800008b8 <__global_pointer$>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20010088:	cb818113          	addi	sp,gp,-840 # 80000570 <_sp>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
2001008c:	4281                	li	t0,0
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
2001008e:	40000313          	li	t1,1024
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20010092:	00a28563          	beq	t0,a0,2001009c <_start+0x1e>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
20010096:	911a                	add	sp,sp,t1
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
20010098:	0285                	addi	t0,t0,1
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:60
  j 1b
2001009a:	bfe5                	j	20010092 <_start+0x14>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
2001009c:	ff017113          	andi	sp,sp,-16
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
200100a0:	00000293          	li	t0,0
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
200100a4:	08551763          	bne	a0,t0,20010132 <_skip_init>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
200100a8:	00002297          	auipc	t0,0x2
200100ac:	9f028293          	addi	t0,t0,-1552 # 20011a98 <metal_segment_data_source_start>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
200100b0:	5fff0317          	auipc	t1,0x5fff0
200100b4:	f5030313          	addi	t1,t1,-176 # 80000000 <metal_segment_data_target_start>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
200100b8:	82818393          	addi	t2,gp,-2008 # 800000e0 <metal_segment_data_target_end>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
200100bc:	00628c63          	beq	t0,t1,200100d4 <_start+0x56>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
200100c0:	00735a63          	bge	t1,t2,200100d4 <_start+0x56>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
200100c4:	0002a503          	lw	a0,0(t0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
200100c8:	0291                	addi	t0,t0,4
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
200100ca:	00a32023          	sw	a0,0(t1)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
200100ce:	0311                	addi	t1,t1,4
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
200100d0:	fe734ae3          	blt	t1,t2,200100c4 <_start+0x46>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
200100d4:	00002297          	auipc	t0,0x2
200100d8:	9c428293          	addi	t0,t0,-1596 # 20011a98 <metal_segment_data_source_start>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
200100dc:	e7ff0317          	auipc	t1,0xe7ff0
200100e0:	f2430313          	addi	t1,t1,-220 # 8000000 <metal_segment_itim_target_end>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
200100e4:	e7ff0397          	auipc	t2,0xe7ff0
200100e8:	f1c38393          	addi	t2,t2,-228 # 8000000 <metal_segment_itim_target_end>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
200100ec:	00628c63          	beq	t0,t1,20010104 <_start+0x86>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
200100f0:	00735a63          	bge	t1,t2,20010104 <_start+0x86>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
200100f4:	0002a503          	lw	a0,0(t0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
200100f8:	0291                	addi	t0,t0,4
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
200100fa:	00a32023          	sw	a0,0(t1)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
200100fe:	0311                	addi	t1,t1,4
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20010100:	fe734ae3          	blt	t1,t2,200100f4 <_start+0x76>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20010104:	0000100f          	fence.i
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
20010108:	5fff0317          	auipc	t1,0x5fff0
2001010c:	fd830313          	addi	t1,t1,-40 # 800000e0 <metal_segment_data_target_end>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20010110:	8b818393          	addi	t2,gp,-1864 # 80000170 <metal_segment_bss_target_end>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
20010114:	00735763          	bge	t1,t2,20010122 <_start+0xa4>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20010118:	00032023          	sw	zero,0(t1)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
2001011c:	0311                	addi	t1,t1,4
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
2001011e:	fe734de3          	blt	t1,t2,20010118 <_start+0x9a>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
20010122:	c211                	beqz	a2,20010126 <_start+0xa8>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:148
  jalr a2
20010124:	9602                	jalr	a2
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
20010126:	00000517          	auipc	a0,0x0
2001012a:	45450513          	addi	a0,a0,1108 # 2001057a <__libc_fini_array>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:153
  call atexit
2001012e:	2919                	jal	20010544 <atexit>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
20010130:	2149                	jal	200105b2 <__libc_init_array>

20010132 <_skip_init>:
_skip_init():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
20010132:	3f3d                	jal	20010070 <__metal_synchronize_harts>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20010134:	301027f3          	csrr	a5,misa
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
20010138:	00010737          	lui	a4,0x10
2001013c:	02870713          	addi	a4,a4,40 # 10028 <DELAY+0x8028>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
20010140:	8ff9                	and	a5,a5,a4
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
20010142:	cb89                	beqz	a5,20010154 <_skip_init+0x22>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20010144:	300027f3          	csrr	a5,mstatus
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
20010148:	6709                	lui	a4,0x2
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
2001014a:	8fd9                	or	a5,a5,a4
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
2001014c:	30079073          	csrw	mstatus,a5
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
20010150:	00305073          	csrwi	fcsr,0
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20010154:	4505                	li	a0,1
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
20010156:	00001597          	auipc	a1,0x1
2001015a:	09658593          	addi	a1,a1,150 # 200111ec <argv>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
2001015e:	00001617          	auipc	a2,0x1
20010162:	09260613          	addi	a2,a2,146 # 200111f0 <envp>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:180
  call secondary_main
20010166:	2029                	jal	20010170 <secondary_main>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
20010168:	26dd                	jal	2001054e <exit>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
2001016a:	80a2                	mv	ra,s0
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:192
  ret
2001016c:	8082                	ret

2001016e <_fini>:
_init():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
2001016e:	8082                	ret

20010170 <secondary_main>:
secondary_main():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
20010170:	1141                	addi	sp,sp,-16
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20010172:	c206                	sw	ra,4(sp)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
20010174:	f14022f3          	csrr	t0,mhartid
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
20010178:	00000313          	li	t1,0
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
2001017c:	00628563          	beq	t0,t1,20010186 <secondary_main+0x16>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:225
1:
  wfi
20010180:	10500073          	wfi
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:226
  j 1b
20010184:	bff5                	j	20010180 <secondary_main+0x10>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:228
2:
  call main
20010186:	282d                	jal	200101c0 <main>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
20010188:	4092                	lw	ra,4(sp)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
2001018a:	0141                	addi	sp,sp,16
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/crt0.S:235
  ret
2001018c:	8082                	ret

Disassembly of section .text:

200101c0 <main>:
main():
/home/yon/wsFreedomStudio/GiveMe5/src/giveMe5.c:11
 */
#include "main.h"
#include "gpio.h"
#include "mtime.h"

int main(void) {
200101c0:	1141                	addi	sp,sp,-16
200101c2:	c606                	sw	ra,12(sp)
200101c4:	c422                	sw	s0,8(sp)
200101c6:	0800                	addi	s0,sp,16
/home/yon/wsFreedomStudio/GiveMe5/src/giveMe5.c:12
	register_handler(*vector_table, MODE_VECTOR);
200101c8:	4585                	li	a1,1
200101ca:	200107b7          	lui	a5,0x20010
200101ce:	3c078513          	addi	a0,a5,960 # 200103c0 <vector_table>
200101d2:	2e39                	jal	200104f0 <register_handler>
/home/yon/wsFreedomStudio/GiveMe5/src/giveMe5.c:13
	enable_timer_interrupts();
200101d4:	2465                	jal	2001047c <enable_timer_interrupts>
/home/yon/wsFreedomStudio/GiveMe5/src/giveMe5.c:14
	enable_global_interrupts();
200101d6:	24bd                	jal	20010444 <enable_global_interrupts>
/home/yon/wsFreedomStudio/GiveMe5/src/giveMe5.c:15
	set_time_cmp(64000);
200101d8:	67c1                	lui	a5,0x10
200101da:	a0078513          	addi	a0,a5,-1536 # fa00 <DELAY+0x7a00>
200101de:	2cd9                	jal	200104b4 <set_time_cmp>
/home/yon/wsFreedomStudio/GiveMe5/src/giveMe5.c:17

	gpio_output_enable_c(LED_GREEN);
200101e0:	454d                	li	a0,19
200101e2:	2839                	jal	20010200 <gpio_output_enable_c>
/home/yon/wsFreedomStudio/GiveMe5/src/giveMe5.c:18
	gpio_output_enable_c(LED_RED);
200101e4:	4559                	li	a0,22
200101e6:	2829                	jal	20010200 <gpio_output_enable_c>
/home/yon/wsFreedomStudio/GiveMe5/src/giveMe5.c:19
	gpio_output_enable_c(LED_BLUE);
200101e8:	4555                	li	a0,21
200101ea:	2819                	jal	20010200 <gpio_output_enable_c>
/home/yon/wsFreedomStudio/GiveMe5/src/giveMe5.c:21

	gpio_output_set_c(LED_RED, LED_OFF);
200101ec:	4585                	li	a1,1
200101ee:	4559                	li	a0,22
200101f0:	2041                	jal	20010270 <gpio_output_set_c>
/home/yon/wsFreedomStudio/GiveMe5/src/giveMe5.c:22
	gpio_output_set_c(LED_GREEN, LED_OFF);
200101f2:	4585                	li	a1,1
200101f4:	454d                	li	a0,19
200101f6:	28ad                	jal	20010270 <gpio_output_set_c>
/home/yon/wsFreedomStudio/GiveMe5/src/giveMe5.c:23
	gpio_output_set_c(LED_BLUE, LED_OFF);
200101f8:	4585                	li	a1,1
200101fa:	4555                	li	a0,21
200101fc:	2895                	jal	20010270 <gpio_output_set_c>
/home/yon/wsFreedomStudio/GiveMe5/src/giveMe5.c:24 (discriminator 1)
	while (1) {}
200101fe:	a001                	j	200101fe <main+0x3e>

20010200 <gpio_output_enable_c>:
gpio_output_enable_c():
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:10
 *      Author: yon
 */

#include "gpio.h"

void gpio_output_enable_c(unsigned int pin_number) {
20010200:	7179                	addi	sp,sp,-48
20010202:	d622                	sw	s0,44(sp)
20010204:	1800                	addi	s0,sp,48
20010206:	fca42e23          	sw	a0,-36(s0)
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:11
	gpio_registers_t *GPIO = (gpio_registers_t*)GPIO_BASE;
2001020a:	100127b7          	lui	a5,0x10012
2001020e:	fef42623          	sw	a5,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:13

	int mask = 1 << pin_number;
20010212:	fdc42783          	lw	a5,-36(s0)
20010216:	4705                	li	a4,1
20010218:	00f717b3          	sll	a5,a4,a5
2001021c:	fef42423          	sw	a5,-24(s0)
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:14
	char is_enabled = GPIO->output_enable & mask;
20010220:	fec42783          	lw	a5,-20(s0)
20010224:	479c                	lw	a5,8(a5)
20010226:	0ff7f713          	andi	a4,a5,255
2001022a:	fe842783          	lw	a5,-24(s0)
2001022e:	0ff7f793          	andi	a5,a5,255
20010232:	8ff9                	and	a5,a5,a4
20010234:	fef403a3          	sb	a5,-25(s0)
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:15
	if (is_enabled) {
20010238:	fe744783          	lbu	a5,-25(s0)
2001023c:	cf89                	beqz	a5,20010256 <gpio_output_enable_c+0x56>
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:16
		GPIO->output_enable &= ~mask;
2001023e:	fec42783          	lw	a5,-20(s0)
20010242:	479c                	lw	a5,8(a5)
20010244:	fe842703          	lw	a4,-24(s0)
20010248:	fff74713          	not	a4,a4
2001024c:	8f7d                	and	a4,a4,a5
2001024e:	fec42783          	lw	a5,-20(s0)
20010252:	c798                	sw	a4,8(a5)
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:21
	}
	else {
		GPIO->output_enable |= mask;
	}
	return;
20010254:	a819                	j	2001026a <gpio_output_enable_c+0x6a>
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:19
		GPIO->output_enable |= mask;
20010256:	fec42783          	lw	a5,-20(s0)
2001025a:	4798                	lw	a4,8(a5)
2001025c:	fe842783          	lw	a5,-24(s0)
20010260:	8f5d                	or	a4,a4,a5
20010262:	fec42783          	lw	a5,-20(s0)
20010266:	c798                	sw	a4,8(a5)
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:21
	return;
20010268:	0001                	nop
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:22
}
2001026a:	5432                	lw	s0,44(sp)
2001026c:	6145                	addi	sp,sp,48
2001026e:	8082                	ret

20010270 <gpio_output_set_c>:
gpio_output_set_c():
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:24

void gpio_output_set_c(unsigned int pin_number, unsigned int value) {
20010270:	7179                	addi	sp,sp,-48
20010272:	d622                	sw	s0,44(sp)
20010274:	1800                	addi	s0,sp,48
20010276:	fca42e23          	sw	a0,-36(s0)
2001027a:	fcb42c23          	sw	a1,-40(s0)
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:25
	gpio_registers_t *GPIO = (gpio_registers_t*)GPIO_BASE;
2001027e:	100127b7          	lui	a5,0x10012
20010282:	fef42623          	sw	a5,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:27

	int mask = 1 << pin_number;
20010286:	fdc42783          	lw	a5,-36(s0)
2001028a:	4705                	li	a4,1
2001028c:	00f717b3          	sll	a5,a4,a5
20010290:	fef42423          	sw	a5,-24(s0)
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:28
	GPIO->output_value &= ~mask;
20010294:	fec42783          	lw	a5,-20(s0)
20010298:	47dc                	lw	a5,12(a5)
2001029a:	fe842703          	lw	a4,-24(s0)
2001029e:	fff74713          	not	a4,a4
200102a2:	8f7d                	and	a4,a4,a5
200102a4:	fec42783          	lw	a5,-20(s0)
200102a8:	c7d8                	sw	a4,12(a5)
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:29
	if (value) {
200102aa:	fd842783          	lw	a5,-40(s0)
200102ae:	cb99                	beqz	a5,200102c4 <gpio_output_set_c+0x54>
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:30
		GPIO->output_value |= mask;
200102b0:	fec42783          	lw	a5,-20(s0)
200102b4:	47d8                	lw	a4,12(a5)
200102b6:	fe842783          	lw	a5,-24(s0)
200102ba:	8f5d                	or	a4,a4,a5
200102bc:	fec42783          	lw	a5,-20(s0)
200102c0:	c7d8                	sw	a4,12(a5)
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:32
	}
	return;
200102c2:	0001                	nop
200102c4:	0001                	nop
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:33
}
200102c6:	5432                	lw	s0,44(sp)
200102c8:	6145                	addi	sp,sp,48
200102ca:	8082                	ret

200102cc <gpio_output_toggle_c>:
gpio_output_toggle_c():
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:35

void gpio_output_toggle_c(unsigned int pin_number) {
200102cc:	7179                	addi	sp,sp,-48
200102ce:	d606                	sw	ra,44(sp)
200102d0:	d422                	sw	s0,40(sp)
200102d2:	1800                	addi	s0,sp,48
200102d4:	fca42e23          	sw	a0,-36(s0)
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:36
	gpio_registers_t *GPIO = (gpio_registers_t*)GPIO_BASE;
200102d8:	100127b7          	lui	a5,0x10012
200102dc:	fef42623          	sw	a5,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:38

	int mask = 1 << pin_number;
200102e0:	fdc42783          	lw	a5,-36(s0)
200102e4:	4705                	li	a4,1
200102e6:	00f717b3          	sll	a5,a4,a5
200102ea:	fef42423          	sw	a5,-24(s0)
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:39
	int previous_value = GPIO->output_value & mask;
200102ee:	fec42783          	lw	a5,-20(s0)
200102f2:	47d8                	lw	a4,12(a5)
200102f4:	fe842783          	lw	a5,-24(s0)
200102f8:	8ff9                	and	a5,a5,a4
200102fa:	fef42223          	sw	a5,-28(s0)
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:41

	if (previous_value) {
200102fe:	fe442783          	lw	a5,-28(s0)
20010302:	c791                	beqz	a5,2001030e <gpio_output_toggle_c+0x42>
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:42
		gpio_output_set_c(pin_number, 0);
20010304:	4581                	li	a1,0
20010306:	fdc42503          	lw	a0,-36(s0)
2001030a:	379d                	jal	20010270 <gpio_output_set_c>
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:48
	}
	else {
		gpio_output_set_c(pin_number, 1);
	}

	return;
2001030c:	a031                	j	20010318 <gpio_output_toggle_c+0x4c>
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:45
		gpio_output_set_c(pin_number, 1);
2001030e:	4585                	li	a1,1
20010310:	fdc42503          	lw	a0,-36(s0)
20010314:	3fb1                	jal	20010270 <gpio_output_set_c>
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:48
	return;
20010316:	0001                	nop
/home/yon/wsFreedomStudio/GiveMe5/src/gpio.c:49
}
20010318:	50b2                	lw	ra,44(sp)
2001031a:	5422                	lw	s0,40(sp)
2001031c:	6145                	addi	sp,sp,48
2001031e:	8082                	ret

20010320 <mtime_int_handler>:
mtime_int_handler():
/home/yon/wsFreedomStudio/GiveMe5/src/mtime.c:11
 */
#include "mtime.h"
#include "main.h"
#include "gpio.h"

__attribute__ ((interrupt)) void mtime_int_handler() {
20010320:	711d                	addi	sp,sp,-96
20010322:	ce86                	sw	ra,92(sp)
20010324:	cc96                	sw	t0,88(sp)
20010326:	ca9a                	sw	t1,84(sp)
20010328:	c89e                	sw	t2,80(sp)
2001032a:	c6a2                	sw	s0,76(sp)
2001032c:	c4aa                	sw	a0,72(sp)
2001032e:	c2ae                	sw	a1,68(sp)
20010330:	c0b2                	sw	a2,64(sp)
20010332:	de36                	sw	a3,60(sp)
20010334:	dc3a                	sw	a4,56(sp)
20010336:	da3e                	sw	a5,52(sp)
20010338:	d842                	sw	a6,48(sp)
2001033a:	d646                	sw	a7,44(sp)
2001033c:	d472                	sw	t3,40(sp)
2001033e:	d276                	sw	t4,36(sp)
20010340:	d07a                	sw	t5,32(sp)
20010342:	ce7e                	sw	t6,28(sp)
20010344:	1080                	addi	s0,sp,96
/home/yon/wsFreedomStudio/GiveMe5/src/mtime.c:13
	unsigned int mcause;
	__asm__ volatile ("csrr %0, mcause":"=r"(mcause)::);
20010346:	342027f3          	csrr	a5,mcause
2001034a:	faf42623          	sw	a5,-84(s0)
/home/yon/wsFreedomStudio/GiveMe5/src/mtime.c:14
	if (mcause >> 31) {
2001034e:	fac42783          	lw	a5,-84(s0)
20010352:	0207d263          	bgez	a5,20010376 <mtime_int_handler+0x56>
/home/yon/wsFreedomStudio/GiveMe5/src/mtime.c:15
		unsigned long *mtime_reg = (unsigned long*)MTIMECMP_REG;
20010356:	020047b7          	lui	a5,0x2004
2001035a:	faf42423          	sw	a5,-88(s0)
/home/yon/wsFreedomStudio/GiveMe5/src/mtime.c:16
		*mtime_reg = (*mtime_reg) + DELAY;
2001035e:	fa842783          	lw	a5,-88(s0)
20010362:	4398                	lw	a4,0(a5)
20010364:	67a1                	lui	a5,0x8
20010366:	d0078793          	addi	a5,a5,-768 # 7d00 <__heap_size+0x7500>
2001036a:	973e                	add	a4,a4,a5
2001036c:	fa842783          	lw	a5,-88(s0)
20010370:	c398                	sw	a4,0(a5)
/home/yon/wsFreedomStudio/GiveMe5/src/mtime.c:17
		gpio_output_toggle_c(LED_BLUE);
20010372:	4555                	li	a0,21
20010374:	3fa1                	jal	200102cc <gpio_output_toggle_c>
/home/yon/wsFreedomStudio/GiveMe5/src/mtime.c:19
	}
}
20010376:	0001                	nop
20010378:	40f6                	lw	ra,92(sp)
2001037a:	42e6                	lw	t0,88(sp)
2001037c:	4356                	lw	t1,84(sp)
2001037e:	43c6                	lw	t2,80(sp)
20010380:	4436                	lw	s0,76(sp)
20010382:	4526                	lw	a0,72(sp)
20010384:	4596                	lw	a1,68(sp)
20010386:	4606                	lw	a2,64(sp)
20010388:	56f2                	lw	a3,60(sp)
2001038a:	5762                	lw	a4,56(sp)
2001038c:	57d2                	lw	a5,52(sp)
2001038e:	5842                	lw	a6,48(sp)
20010390:	58b2                	lw	a7,44(sp)
20010392:	5e22                	lw	t3,40(sp)
20010394:	5e92                	lw	t4,36(sp)
20010396:	5f02                	lw	t5,32(sp)
20010398:	4ff2                	lw	t6,28(sp)
2001039a:	6125                	addi	sp,sp,96
2001039c:	30200073          	mret
	...

200103c0 <vector_table>:
vector_table():
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:17

.balign 64
.global vector_table
.type vector_table, @function
vector_table:
	j default_handler
200103c0:	07c0006f          	j	2001043c <default_handler>
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:18
	j default_handler
200103c4:	0780006f          	j	2001043c <default_handler>
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:19
	j default_handler
200103c8:	0740006f          	j	2001043c <default_handler>
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:20
	j swi_handler
200103cc:	0280006f          	j	200103f4 <swi_handler>
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:21
	j default_handler
200103d0:	06c0006f          	j	2001043c <default_handler>
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:22
	j default_handler
200103d4:	0680006f          	j	2001043c <default_handler>
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:23
	j default_handler
200103d8:	0640006f          	j	2001043c <default_handler>
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:24
	j mtime_int_handler
200103dc:	f45ff06f          	j	20010320 <mtime_int_handler>
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:25
	j default_handler
200103e0:	05c0006f          	j	2001043c <default_handler>
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:26
	j default_handler
200103e4:	0580006f          	j	2001043c <default_handler>
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:27
	j default_handler
200103e8:	0540006f          	j	2001043c <default_handler>
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:28
	j exti_handler
200103ec:	04c0006f          	j	20010438 <exti_handler>
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:29
	j default_handler
200103f0:	04c0006f          	j	2001043c <default_handler>

200103f4 <swi_handler>:
swi_handler():
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:36
.balign 4
.weak swi_handler
.global swi_handler
.type swi_handler, @function
swi_handler:
	mret
200103f4:	30200073          	mret
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:44
.balign 4
.weak mtime_int_handler
.global mtime_int_handler
.type mtime_int_handler, @function
mtime_int_handler:
	csrr t0, mcause // control
200103f8:	342022f3          	csrr	t0,mcause
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:45
	bgez t0, 1f // branch if greater or equal to zero
200103fc:	0202dc63          	bgez	t0,20010434 <swi_handler+0x40>
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:47

    li t0, 0x0200bff8               # load the mtime address
20010400:	0200c2b7          	lui	t0,0x200c
20010404:	ff828293          	addi	t0,t0,-8 # 200bff8 <DELAY+0x2003ff8>
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:48
    lw t1, 0(t0)                    # load mtime (LO)
20010408:	0002a303          	lw	t1,0(t0)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:49
    lw t2, 4(t0)                    # load mtime (HI)
2001040c:	0042a383          	lw	t2,4(t0)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:50
    li t3, DELAY
20010410:	00008e37          	lui	t3,0x8
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:51
    add t3, t1, t3                  # increment lower bits by DELAY cycles
20010414:	01c30e33          	add	t3,t1,t3
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:52
    sltu t1, t3, t1                 # generate carry-out (set 1 if less than, unsigned)
20010418:	006e3333          	sltu	t1,t3,t1
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:53
    add t2, t2, t1                  # add carry to upper bits
2001041c:	006383b3          	add	t2,t2,t1
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:55

    li t0, 0x02004000
20010420:	020042b7          	lui	t0,0x2004
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:56
    sw t3, 0(t0)                    # update mtimecmp (LO)
20010424:	01c2a023          	sw	t3,0(t0) # 2004000 <DELAY+0x1ffc000>
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:57
    sw t2, 4(t0)                    # update mtimecmp (HI)
20010428:	0072a223          	sw	t2,4(t0)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:60

    # toggle green led:
    li a0, 19
2001042c:	01300513          	li	a0,19
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:61
    jal gpio_output_toggle_c
20010430:	e9dff0ef          	jal	ra,200102cc <gpio_output_toggle_c>
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:64

1:
	mret
20010434:	30200073          	mret

20010438 <exti_handler>:
exti_handler():
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:71
.balign 4
.weak exti_handler
.global exti_handler
.type exti_handler, @function
exti_handler:
	mret
20010438:	30200073          	mret

2001043c <default_handler>:
default_handler():
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:78
.balign 4
.weak default_handler
.global default_handler
.type default_handler, @function
default_handler:
	mret
2001043c:	30200073          	mret

20010440 <_panic_handler>:
_panic_handler():
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:84

.balign 4
.global _panic_handler
.type _panic_handler, @function
_panic_handler:
    j _panic_handler
20010440:	0000006f          	j	20010440 <_panic_handler>

20010444 <enable_global_interrupts>:
enable_global_interrupts():
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:95

.balign 4
.global enable_global_interrupts
.type enable_global_interrupts, @function
enable_global_interrupts:
    addi sp, sp, -16                # Allocate the routine stack frame
20010444:	ff010113          	addi	sp,sp,-16
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:96
    sw ra, 12(sp)                   # Save the return address
20010448:	00112623          	sw	ra,12(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:97
    sw fp, 8(sp)                    # Save the frame pointer
2001044c:	00812423          	sw	s0,8(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:98
    sw s1, 4(sp)
20010450:	00912223          	sw	s1,4(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:99
    sw s2, 0(sp)
20010454:	01212023          	sw	s2,0(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:100
    addi fp, sp, 16                 # Set the framepointer
20010458:	01010413          	addi	s0,sp,16
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:102

    li t0, MSTATUS_MIE_BIT_MASK     # load the mask for MIE
2001045c:	00800293          	li	t0,8
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:103
    csrs mstatus, t0                #  set the MIE bit in mstatus
20010460:	3002a073          	csrs	mstatus,t0
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:105

    lw s2, 0(sp)
20010464:	00012903          	lw	s2,0(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:106
    lw s1, 4(sp)
20010468:	00412483          	lw	s1,4(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:107
    lw fp, 8(sp)                    # restore the frame pointer
2001046c:	00812403          	lw	s0,8(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:108
    lw ra, 12(sp)                   # restore the return address from the stack frame
20010470:	00c12083          	lw	ra,12(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:109
    addi sp, sp, 16                 # de-allocate the routine stack frame
20010474:	01010113          	addi	sp,sp,16
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:110
    ret
20010478:	00008067          	ret

2001047c <enable_timer_interrupts>:
enable_timer_interrupts():
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:117

.balign 4
.global enable_timer_interrupts
.type enable_timer_interrupts, @function
enable_timer_interrupts:
    addi sp, sp, -16                # Allocate the routine stack frame
2001047c:	ff010113          	addi	sp,sp,-16
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:118
    sw ra, 12(sp)                   # Save the return address
20010480:	00112623          	sw	ra,12(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:119
    sw fp, 8(sp)                    # Save the frame pointer
20010484:	00812423          	sw	s0,8(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:120
    sw s1, 4(sp)
20010488:	00912223          	sw	s1,4(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:121
    sw s2, 0(sp)
2001048c:	01212023          	sw	s2,0(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:122
    addi fp, sp, 16                 # Set the framepointer
20010490:	01010413          	addi	s0,sp,16
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:124

    li t0, MIE_MTIE_BIT_MASK
20010494:	08000293          	li	t0,128
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:125
    csrs mie, t0
20010498:	3042a073          	csrs	mie,t0
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:127

    lw s2, 0(sp)
2001049c:	00012903          	lw	s2,0(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:128
    lw s1, 4(sp)
200104a0:	00412483          	lw	s1,4(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:129
    lw fp, 8(sp)                    # restore the frame pointer
200104a4:	00812403          	lw	s0,8(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:130
    lw ra, 12(sp)                   # restore the return address from the stack frame
200104a8:	00c12083          	lw	ra,12(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:131
    addi sp, sp, 16                 # de-allocate the routine stack frame
200104ac:	01010113          	addi	sp,sp,16
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:132
    ret
200104b0:	00008067          	ret

200104b4 <set_time_cmp>:
set_time_cmp():
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:139

.balign 4
.global set_time_cmp
.type set_time_cmp, @function
set_time_cmp:
    addi sp, sp, -16                # Allocate the routine stack frame
200104b4:	ff010113          	addi	sp,sp,-16
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:140
    sw ra, 12(sp)                   # Save the return address
200104b8:	00112623          	sw	ra,12(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:141
    sw fp, 8(sp)                    # Save the frame pointer
200104bc:	00812423          	sw	s0,8(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:142
    sw s1, 4(sp)
200104c0:	00912223          	sw	s1,4(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:143
    sw s2, 0(sp)
200104c4:	01212023          	sw	s2,0(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:144
    addi fp, sp, 16                 # Set the framepointer
200104c8:	01010413          	addi	s0,sp,16
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:146

	la t0, 0x02004000
200104cc:	020042b7          	lui	t0,0x2004
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:147
	sw a0, 0(t0)					# save into mtimecmp
200104d0:	00a2a023          	sw	a0,0(t0) # 2004000 <DELAY+0x1ffc000>
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:148
	sw x0, 4(t0)
200104d4:	0002a223          	sw	zero,4(t0)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:150

    lw s2, 0(sp)
200104d8:	00012903          	lw	s2,0(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:151
    lw s1, 4(sp)
200104dc:	00412483          	lw	s1,4(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:152
    lw fp, 8(sp)                    # restore the frame pointer
200104e0:	00812403          	lw	s0,8(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:153
    lw ra, 12(sp)                   # restore the return address from the stack frame
200104e4:	00c12083          	lw	ra,12(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:154
    addi sp, sp, 16                 # de-allocate the routine stack frame
200104e8:	01010113          	addi	sp,sp,16
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:155
    ret
200104ec:	00008067          	ret

200104f0 <register_handler>:
register_handler():
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:165
// a1 - interrupt processing mode (0x0 - direct, 0x1 - vectored)
.balign 4
.global register_handler
.type register_handler, @function
register_handler:
    addi sp, sp, -16                # Allocate the routine stack frame
200104f0:	ff010113          	addi	sp,sp,-16
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:166
    sw ra, 12(sp)                   # Save the return address
200104f4:	00112623          	sw	ra,12(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:167
    sw fp, 8(sp)                    # Save the frame pointer
200104f8:	00812423          	sw	s0,8(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:168
    sw s1, 4(sp)
200104fc:	00912223          	sw	s1,4(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:169
    sw s2, 0(sp)
20010500:	01212023          	sw	s2,0(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:170
    addi fp, sp, 16                 # Set the framepointer
20010504:	01010413          	addi	s0,sp,16
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:173

	# mtvec: ..............base............xx <- mode
    or a0, a0, a1
20010508:	00b56533          	or	a0,a0,a1
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:174
    csrw mtvec, a0
2001050c:	30551073          	csrw	mtvec,a0
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:176

    lw s2, 0(sp)
20010510:	00012903          	lw	s2,0(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:177
    lw s1, 4(sp)
20010514:	00412483          	lw	s1,4(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:178
    lw fp, 8(sp)                    # restore the frame pointer
20010518:	00812403          	lw	s0,8(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:179
    lw ra, 12(sp)                   # restore the return address from the stack frame
2001051c:	00c12083          	lw	ra,12(sp)
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:180
    addi sp, sp, 16                 # de-allocate the routine stack frame
20010520:	01010113          	addi	sp,sp,16
/home/yon/wsFreedomStudio/GiveMe5/src/interrupts.S:181
    ret
20010524:	00008067          	ret
	...

20010544 <atexit>:
atexit():
20010544:	85aa                	mv	a1,a0
20010546:	4681                	li	a3,0
20010548:	4601                	li	a2,0
2001054a:	4501                	li	a0,0
2001054c:	a8c1                	j	2001061c <__register_exitproc>

2001054e <exit>:
exit():
2001054e:	1141                	addi	sp,sp,-16
20010550:	c422                	sw	s0,8(sp)
20010552:	c606                	sw	ra,12(sp)
20010554:	00000797          	auipc	a5,0x0
20010558:	15078793          	addi	a5,a5,336 # 200106a4 <__call_exitprocs>
2001055c:	842a                	mv	s0,a0
2001055e:	c399                	beqz	a5,20010564 <exit+0x16>
20010560:	4581                	li	a1,0
20010562:	2289                	jal	200106a4 <__call_exitprocs>
20010564:	5fff0797          	auipc	a5,0x5fff0
20010568:	b5478793          	addi	a5,a5,-1196 # 800000b8 <_global_impure_ptr>
2001056c:	4388                	lw	a0,0(a5)
2001056e:	551c                	lw	a5,40(a0)
20010570:	c391                	beqz	a5,20010574 <exit+0x26>
20010572:	9782                	jalr	a5
20010574:	8522                	mv	a0,s0
20010576:	465000ef          	jal	ra,200111da <_exit>

2001057a <__libc_fini_array>:
__libc_fini_array():
2001057a:	1141                	addi	sp,sp,-16
2001057c:	00001797          	auipc	a5,0x1
20010580:	51c78793          	addi	a5,a5,1308 # 20011a98 <metal_segment_data_source_start>
20010584:	c422                	sw	s0,8(sp)
20010586:	00001417          	auipc	s0,0x1
2001058a:	51240413          	addi	s0,s0,1298 # 20011a98 <metal_segment_data_source_start>
2001058e:	8c1d                	sub	s0,s0,a5
20010590:	c226                	sw	s1,4(sp)
20010592:	c606                	sw	ra,12(sp)
20010594:	8409                	srai	s0,s0,0x2
20010596:	84be                	mv	s1,a5
20010598:	e411                	bnez	s0,200105a4 <__libc_fini_array+0x2a>
2001059a:	40b2                	lw	ra,12(sp)
2001059c:	4422                	lw	s0,8(sp)
2001059e:	4492                	lw	s1,4(sp)
200105a0:	0141                	addi	sp,sp,16
200105a2:	8082                	ret
200105a4:	147d                	addi	s0,s0,-1
200105a6:	00241793          	slli	a5,s0,0x2
200105aa:	97a6                	add	a5,a5,s1
200105ac:	439c                	lw	a5,0(a5)
200105ae:	9782                	jalr	a5
200105b0:	b7e5                	j	20010598 <__libc_fini_array+0x1e>

200105b2 <__libc_init_array>:
__libc_init_array():
200105b2:	1141                	addi	sp,sp,-16
200105b4:	00001797          	auipc	a5,0x1
200105b8:	4dc78793          	addi	a5,a5,1244 # 20011a90 <__init_array_start>
200105bc:	c422                	sw	s0,8(sp)
200105be:	00001417          	auipc	s0,0x1
200105c2:	4d240413          	addi	s0,s0,1234 # 20011a90 <__init_array_start>
200105c6:	8c1d                	sub	s0,s0,a5
200105c8:	c226                	sw	s1,4(sp)
200105ca:	c04a                	sw	s2,0(sp)
200105cc:	c606                	sw	ra,12(sp)
200105ce:	8409                	srai	s0,s0,0x2
200105d0:	4481                	li	s1,0
200105d2:	893e                	mv	s2,a5
200105d4:	02849663          	bne	s1,s0,20010600 <__libc_init_array+0x4e>
200105d8:	00001797          	auipc	a5,0x1
200105dc:	4b878793          	addi	a5,a5,1208 # 20011a90 <__init_array_start>
200105e0:	00001417          	auipc	s0,0x1
200105e4:	4b840413          	addi	s0,s0,1208 # 20011a98 <metal_segment_data_source_start>
200105e8:	8c1d                	sub	s0,s0,a5
200105ea:	8409                	srai	s0,s0,0x2
200105ec:	4481                	li	s1,0
200105ee:	893e                	mv	s2,a5
200105f0:	00849f63          	bne	s1,s0,2001060e <__libc_init_array+0x5c>
200105f4:	40b2                	lw	ra,12(sp)
200105f6:	4422                	lw	s0,8(sp)
200105f8:	4492                	lw	s1,4(sp)
200105fa:	4902                	lw	s2,0(sp)
200105fc:	0141                	addi	sp,sp,16
200105fe:	8082                	ret
20010600:	00249793          	slli	a5,s1,0x2
20010604:	97ca                	add	a5,a5,s2
20010606:	439c                	lw	a5,0(a5)
20010608:	0485                	addi	s1,s1,1
2001060a:	9782                	jalr	a5
2001060c:	b7e1                	j	200105d4 <__libc_init_array+0x22>
2001060e:	00249793          	slli	a5,s1,0x2
20010612:	97ca                	add	a5,a5,s2
20010614:	439c                	lw	a5,0(a5)
20010616:	0485                	addi	s1,s1,1
20010618:	9782                	jalr	a5
2001061a:	bfd9                	j	200105f0 <__libc_init_array+0x3e>

2001061c <__register_exitproc>:
__register_exitproc():
2001061c:	5fff0797          	auipc	a5,0x5fff0
20010620:	ac478793          	addi	a5,a5,-1340 # 800000e0 <metal_segment_data_target_end>
20010624:	439c                	lw	a5,0(a5)
20010626:	8e2a                	mv	t3,a0
20010628:	e39d                	bnez	a5,2001064e <__register_exitproc+0x32>
2001062a:	5fff0717          	auipc	a4,0x5fff0
2001062e:	aba70713          	addi	a4,a4,-1350 # 800000e4 <_global_atexit0>
20010632:	5fff0797          	auipc	a5,0x5fff0
20010636:	aae7a723          	sw	a4,-1362(a5) # 800000e0 <metal_segment_data_target_end>
2001063a:	dfff0517          	auipc	a0,0xdfff0
2001063e:	9c650513          	addi	a0,a0,-1594 # 0 <__metal_boot_hart>
20010642:	87ba                	mv	a5,a4
20010644:	c509                	beqz	a0,2001064e <__register_exitproc+0x32>
20010646:	411c                	lw	a5,0(a0)
20010648:	8af1aa23          	sw	a5,-1868(gp) # 8000016c <_global_atexit0+0x88>
2001064c:	87ba                	mv	a5,a4
2001064e:	43d8                	lw	a4,4(a5)
20010650:	487d                	li	a6,31
20010652:	557d                	li	a0,-1
20010654:	04e84763          	blt	a6,a4,200106a2 <__register_exitproc+0x86>
20010658:	020e0e63          	beqz	t3,20010694 <__register_exitproc+0x78>
2001065c:	0887a803          	lw	a6,136(a5)
20010660:	04080163          	beqz	a6,200106a2 <__register_exitproc+0x86>
20010664:	00271893          	slli	a7,a4,0x2
20010668:	98c2                	add	a7,a7,a6
2001066a:	00c8a023          	sw	a2,0(a7)
2001066e:	10082303          	lw	t1,256(a6)
20010672:	4605                	li	a2,1
20010674:	00e61633          	sll	a2,a2,a4
20010678:	00c36333          	or	t1,t1,a2
2001067c:	10682023          	sw	t1,256(a6)
20010680:	08d8a023          	sw	a3,128(a7)
20010684:	4689                	li	a3,2
20010686:	00de1763          	bne	t3,a3,20010694 <__register_exitproc+0x78>
2001068a:	10482683          	lw	a3,260(a6)
2001068e:	8e55                	or	a2,a2,a3
20010690:	10c82223          	sw	a2,260(a6)
20010694:	00170693          	addi	a3,a4,1
20010698:	070a                	slli	a4,a4,0x2
2001069a:	c3d4                	sw	a3,4(a5)
2001069c:	97ba                	add	a5,a5,a4
2001069e:	c78c                	sw	a1,8(a5)
200106a0:	4501                	li	a0,0
200106a2:	8082                	ret

200106a4 <__call_exitprocs>:
__call_exitprocs():
200106a4:	7179                	addi	sp,sp,-48
200106a6:	cc52                	sw	s4,24(sp)
200106a8:	ca56                	sw	s5,20(sp)
200106aa:	c85a                	sw	s6,16(sp)
200106ac:	c65e                	sw	s7,12(sp)
200106ae:	d606                	sw	ra,44(sp)
200106b0:	d422                	sw	s0,40(sp)
200106b2:	d226                	sw	s1,36(sp)
200106b4:	d04a                	sw	s2,32(sp)
200106b6:	ce4e                	sw	s3,28(sp)
200106b8:	c462                	sw	s8,8(sp)
200106ba:	8b2a                	mv	s6,a0
200106bc:	8a2e                	mv	s4,a1
200106be:	5fff0a97          	auipc	s5,0x5fff0
200106c2:	a22a8a93          	addi	s5,s5,-1502 # 800000e0 <metal_segment_data_target_end>
200106c6:	4b85                	li	s7,1
200106c8:	000aa403          	lw	s0,0(s5)
200106cc:	c811                	beqz	s0,200106e0 <__call_exitprocs+0x3c>
200106ce:	4044                	lw	s1,4(s0)
200106d0:	08842983          	lw	s3,136(s0)
200106d4:	fff48913          	addi	s2,s1,-1
200106d8:	048a                	slli	s1,s1,0x2
200106da:	94a2                	add	s1,s1,s0
200106dc:	00095e63          	bgez	s2,200106f8 <__call_exitprocs+0x54>
200106e0:	50b2                	lw	ra,44(sp)
200106e2:	5422                	lw	s0,40(sp)
200106e4:	5492                	lw	s1,36(sp)
200106e6:	5902                	lw	s2,32(sp)
200106e8:	49f2                	lw	s3,28(sp)
200106ea:	4a62                	lw	s4,24(sp)
200106ec:	4ad2                	lw	s5,20(sp)
200106ee:	4b42                	lw	s6,16(sp)
200106f0:	4bb2                	lw	s7,12(sp)
200106f2:	4c22                	lw	s8,8(sp)
200106f4:	6145                	addi	sp,sp,48
200106f6:	8082                	ret
200106f8:	000a0e63          	beqz	s4,20010714 <__call_exitprocs+0x70>
200106fc:	00099563          	bnez	s3,20010706 <__call_exitprocs+0x62>
20010700:	197d                	addi	s2,s2,-1
20010702:	14f1                	addi	s1,s1,-4
20010704:	bfe1                	j	200106dc <__call_exitprocs+0x38>
20010706:	00291793          	slli	a5,s2,0x2
2001070a:	97ce                	add	a5,a5,s3
2001070c:	0807a783          	lw	a5,128(a5)
20010710:	ff4798e3          	bne	a5,s4,20010700 <__call_exitprocs+0x5c>
20010714:	4058                	lw	a4,4(s0)
20010716:	40dc                	lw	a5,4(s1)
20010718:	177d                	addi	a4,a4,-1
2001071a:	03271863          	bne	a4,s2,2001074a <__call_exitprocs+0xa6>
2001071e:	01242223          	sw	s2,4(s0)
20010722:	dff9                	beqz	a5,20010700 <__call_exitprocs+0x5c>
20010724:	00442c03          	lw	s8,4(s0)
20010728:	00098863          	beqz	s3,20010738 <__call_exitprocs+0x94>
2001072c:	1009a683          	lw	a3,256(s3)
20010730:	012b9733          	sll	a4,s7,s2
20010734:	8ef9                	and	a3,a3,a4
20010736:	ee89                	bnez	a3,20010750 <__call_exitprocs+0xac>
20010738:	9782                	jalr	a5
2001073a:	4058                	lw	a4,4(s0)
2001073c:	000aa783          	lw	a5,0(s5)
20010740:	f98714e3          	bne	a4,s8,200106c8 <__call_exitprocs+0x24>
20010744:	faf40ee3          	beq	s0,a5,20010700 <__call_exitprocs+0x5c>
20010748:	b741                	j	200106c8 <__call_exitprocs+0x24>
2001074a:	0004a223          	sw	zero,4(s1)
2001074e:	bfd1                	j	20010722 <__call_exitprocs+0x7e>
20010750:	00291693          	slli	a3,s2,0x2
20010754:	96ce                	add	a3,a3,s3
20010756:	428c                	lw	a1,0(a3)
20010758:	1049a683          	lw	a3,260(s3)
2001075c:	8f75                	and	a4,a4,a3
2001075e:	e701                	bnez	a4,20010766 <__call_exitprocs+0xc2>
20010760:	855a                	mv	a0,s6
20010762:	9782                	jalr	a5
20010764:	bfd9                	j	2001073a <__call_exitprocs+0x96>
20010766:	852e                	mv	a0,a1
20010768:	9782                	jalr	a5
2001076a:	bfc1                	j	2001073a <__call_exitprocs+0x96>

2001076c <__metal_driver_sifive_fe310_g000_hfrosc_ref>:
__metal_driver_sifive_fe310_g000_hfrosc_ref():
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:911



/* --------------------- sifive_fe310_g000_hfrosc ------------ */
static __inline__ struct metal_clock * __metal_driver_sifive_fe310_g000_hfrosc_ref(const struct metal_clock *clock)
{
2001076c:	1101                	addi	sp,sp,-32
2001076e:	ce22                	sw	s0,28(sp)
20010770:	1000                	addi	s0,sp,32
20010772:	fea42623          	sw	a0,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:912
		return (struct metal_clock *)&__metal_dt_clock_2.clock;
20010776:	800007b7          	lui	a5,0x80000
2001077a:	06c78793          	addi	a5,a5,108 # 8000006c <__global_pointer$+0xfffff7b4>
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:913
}
2001077e:	853e                	mv	a0,a5
20010780:	4472                	lw	s0,28(sp)
20010782:	6105                	addi	sp,sp,32
20010784:	8082                	ret

20010786 <__metal_driver_sifive_fe310_g000_hfrosc_config_base>:
__metal_driver_sifive_fe310_g000_hfrosc_config_base():
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:916

static __inline__ struct __metal_driver_sifive_fe310_g000_prci * __metal_driver_sifive_fe310_g000_hfrosc_config_base(const struct metal_clock *clock)
{
20010786:	1101                	addi	sp,sp,-32
20010788:	ce22                	sw	s0,28(sp)
2001078a:	1000                	addi	s0,sp,32
2001078c:	fea42623          	sw	a0,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:917
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20010790:	800007b7          	lui	a5,0x80000
20010794:	0bc78793          	addi	a5,a5,188 # 800000bc <__global_pointer$+0xfffff804>
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:918
}
20010798:	853e                	mv	a0,a5
2001079a:	4472                	lw	s0,28(sp)
2001079c:	6105                	addi	sp,sp,32
2001079e:	8082                	ret

200107a0 <__metal_driver_sifive_fe310_g000_hfrosc_config_offset>:
__metal_driver_sifive_fe310_g000_hfrosc_config_offset():
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:926
{
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
}

static __inline__ long __metal_driver_sifive_fe310_g000_hfrosc_config_offset(const struct metal_clock *clock)
{
200107a0:	1101                	addi	sp,sp,-32
200107a2:	ce22                	sw	s0,28(sp)
200107a4:	1000                	addi	s0,sp,32
200107a6:	fea42623          	sw	a0,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:927
		return METAL_SIFIVE_FE310_G000_PRCI_HFROSCCFG;
200107aa:	4781                	li	a5,0
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:928
}
200107ac:	853e                	mv	a0,a5
200107ae:	4472                	lw	s0,28(sp)
200107b0:	6105                	addi	sp,sp,32
200107b2:	8082                	ret

200107b4 <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1043
{
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_SIZE;
}

static __inline__ const struct __metal_driver_vtable_sifive_fe310_g000_prci * __metal_driver_sifive_fe310_g000_prci_vtable( )
{
200107b4:	1141                	addi	sp,sp,-16
200107b6:	c622                	sw	s0,12(sp)
200107b8:	0800                	addi	s0,sp,16
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1044
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
200107ba:	81818793          	addi	a5,gp,-2024 # 800000d0 <__metal_driver_vtable_sifive_fe310_g000_prci>
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1045
}
200107be:	853e                	mv	a0,a5
200107c0:	4432                	lw	s0,12(sp)
200107c2:	0141                	addi	sp,sp,16
200107c4:	8082                	ret

200107c6 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:17
#define CONFIG_TRIM    0x001F0000UL
#define CONFIG_ENABLE  0x40000000UL
#define CONFIG_READY   0x80000000UL

long __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(const struct metal_clock *clock)
{
200107c6:	7139                	addi	sp,sp,-64
200107c8:	de06                	sw	ra,60(sp)
200107ca:	dc22                	sw	s0,56(sp)
200107cc:	0080                	addi	s0,sp,64
200107ce:	fca42623          	sw	a0,-52(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:18
    struct metal_clock *ref = __metal_driver_sifive_fe310_g000_hfrosc_ref(clock);
200107d2:	fcc42503          	lw	a0,-52(s0)
200107d6:	3f59                	jal	2001076c <__metal_driver_sifive_fe310_g000_hfrosc_ref>
200107d8:	fea42623          	sw	a0,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:19
    long config_offset = __metal_driver_sifive_fe310_g000_hfrosc_config_offset(clock);
200107dc:	fcc42503          	lw	a0,-52(s0)
200107e0:	37c1                	jal	200107a0 <__metal_driver_sifive_fe310_g000_hfrosc_config_offset>
200107e2:	fea42423          	sw	a0,-24(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:21
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
      __metal_driver_sifive_fe310_g000_hfrosc_config_base(clock);
200107e6:	fcc42503          	lw	a0,-52(s0)
200107ea:	3f71                	jal	20010786 <__metal_driver_sifive_fe310_g000_hfrosc_config_base>
200107ec:	fea42223          	sw	a0,-28(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:23
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
      __metal_driver_sifive_fe310_g000_prci_vtable();
200107f0:	37d1                	jal	200107b4 <__metal_driver_sifive_fe310_g000_prci_vtable>
200107f2:	fea42023          	sw	a0,-32(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:24
    long cfg = vtable->get_reg(config_base, config_offset);
200107f6:	fe042783          	lw	a5,-32(s0)
200107fa:	439c                	lw	a5,0(a5)
200107fc:	fe842583          	lw	a1,-24(s0)
20010800:	fe442503          	lw	a0,-28(s0)
20010804:	9782                	jalr	a5
20010806:	fca42e23          	sw	a0,-36(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:26

    if ((cfg & CONFIG_ENABLE) == 0)
2001080a:	fdc42703          	lw	a4,-36(s0)
2001080e:	400007b7          	lui	a5,0x40000
20010812:	8ff9                	and	a5,a5,a4
20010814:	e399                	bnez	a5,2001081a <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x54>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:27
        return -1;
20010816:	57fd                	li	a5,-1
20010818:	a025                	j	20010840 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x7a>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:28
    if ((cfg & CONFIG_READY) == 0)
2001081a:	fdc42783          	lw	a5,-36(s0)
2001081e:	0007c463          	bltz	a5,20010826 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x60>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:29
        return -1;
20010822:	57fd                	li	a5,-1
20010824:	a831                	j	20010840 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x7a>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:30
    return metal_clock_get_rate_hz(ref) / ((cfg & CONFIG_DIVIDER) + 1);
20010826:	fec42503          	lw	a0,-20(s0)
2001082a:	085000ef          	jal	ra,200110ae <metal_clock_get_rate_hz>
2001082e:	87aa                	mv	a5,a0
20010830:	873e                	mv	a4,a5
20010832:	fdc42783          	lw	a5,-36(s0)
20010836:	03f7f793          	andi	a5,a5,63
2001083a:	0785                	addi	a5,a5,1
2001083c:	02f757b3          	divu	a5,a4,a5
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:31
}
20010840:	853e                	mv	a0,a5
20010842:	50f2                	lw	ra,60(sp)
20010844:	5462                	lw	s0,56(sp)
20010846:	6121                	addi	sp,sp,64
20010848:	8082                	ret

2001084a <__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:34

long __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz(struct metal_clock *clock, long rate)
{
2001084a:	1101                	addi	sp,sp,-32
2001084c:	ce06                	sw	ra,28(sp)
2001084e:	cc22                	sw	s0,24(sp)
20010850:	1000                	addi	s0,sp,32
20010852:	fea42623          	sw	a0,-20(s0)
20010856:	feb42423          	sw	a1,-24(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:35
    return __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(clock);
2001085a:	fec42503          	lw	a0,-20(s0)
2001085e:	37a5                	jal	200107c6 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>
20010860:	87aa                	mv	a5,a0
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:36
}
20010862:	853e                	mv	a0,a5
20010864:	40f2                	lw	ra,28(sp)
20010866:	4462                	lw	s0,24(sp)
20010868:	6105                	addi	sp,sp,32
2001086a:	8082                	ret

2001086c <__metal_driver_sifive_fe310_g000_hfxosc_ref>:
__metal_driver_sifive_fe310_g000_hfxosc_ref():
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:934
{
2001086c:	1101                	addi	sp,sp,-32
2001086e:	ce22                	sw	s0,28(sp)
20010870:	1000                	addi	s0,sp,32
20010872:	fea42623          	sw	a0,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:935
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20010876:	800007b7          	lui	a5,0x80000
2001087a:	06078793          	addi	a5,a5,96 # 80000060 <__global_pointer$+0xfffff7a8>
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:936
}
2001087e:	853e                	mv	a0,a5
20010880:	4472                	lw	s0,28(sp)
20010882:	6105                	addi	sp,sp,32
20010884:	8082                	ret

20010886 <__metal_driver_sifive_fe310_g000_hfxosc_config_base>:
__metal_driver_sifive_fe310_g000_hfxosc_config_base():
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:939
{
20010886:	1101                	addi	sp,sp,-32
20010888:	ce22                	sw	s0,28(sp)
2001088a:	1000                	addi	s0,sp,32
2001088c:	fea42623          	sw	a0,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:940
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20010890:	800007b7          	lui	a5,0x80000
20010894:	0bc78793          	addi	a5,a5,188 # 800000bc <__global_pointer$+0xfffff804>
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:941
}
20010898:	853e                	mv	a0,a5
2001089a:	4472                	lw	s0,28(sp)
2001089c:	6105                	addi	sp,sp,32
2001089e:	8082                	ret

200108a0 <__metal_driver_sifive_fe310_g000_hfxosc_config_offset>:
__metal_driver_sifive_fe310_g000_hfxosc_config_offset():
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:944
{
200108a0:	1101                	addi	sp,sp,-32
200108a2:	ce22                	sw	s0,28(sp)
200108a4:	1000                	addi	s0,sp,32
200108a6:	fea42623          	sw	a0,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:945
		return METAL_SIFIVE_FE310_G000_PRCI_HFXOSCCFG;
200108aa:	4791                	li	a5,4
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:946
}
200108ac:	853e                	mv	a0,a5
200108ae:	4472                	lw	s0,28(sp)
200108b0:	6105                	addi	sp,sp,32
200108b2:	8082                	ret

200108b4 <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1043
{
200108b4:	1141                	addi	sp,sp,-16
200108b6:	c622                	sw	s0,12(sp)
200108b8:	0800                	addi	s0,sp,16
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1044
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
200108ba:	81818793          	addi	a5,gp,-2024 # 800000d0 <__metal_driver_vtable_sifive_fe310_g000_prci>
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1045
}
200108be:	853e                	mv	a0,a5
200108c0:	4432                	lw	s0,12(sp)
200108c2:	0141                	addi	sp,sp,16
200108c4:	8082                	ret

200108c6 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:15

#define CONFIG_ENABLE  0x40000000UL
#define CONFIG_READY   0x80000000UL

long __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(const struct metal_clock *clock)
{
200108c6:	7139                	addi	sp,sp,-64
200108c8:	de06                	sw	ra,60(sp)
200108ca:	dc22                	sw	s0,56(sp)
200108cc:	0080                	addi	s0,sp,64
200108ce:	fca42623          	sw	a0,-52(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:16
    struct metal_clock *ref = __metal_driver_sifive_fe310_g000_hfxosc_ref(clock);
200108d2:	fcc42503          	lw	a0,-52(s0)
200108d6:	3f59                	jal	2001086c <__metal_driver_sifive_fe310_g000_hfxosc_ref>
200108d8:	fea42623          	sw	a0,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:17
    long config_offset = __metal_driver_sifive_fe310_g000_hfxosc_config_offset(clock);
200108dc:	fcc42503          	lw	a0,-52(s0)
200108e0:	37c1                	jal	200108a0 <__metal_driver_sifive_fe310_g000_hfxosc_config_offset>
200108e2:	fea42423          	sw	a0,-24(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:19
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
      __metal_driver_sifive_fe310_g000_hfxosc_config_base(clock);
200108e6:	fcc42503          	lw	a0,-52(s0)
200108ea:	3f71                	jal	20010886 <__metal_driver_sifive_fe310_g000_hfxosc_config_base>
200108ec:	fea42223          	sw	a0,-28(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:21
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
      __metal_driver_sifive_fe310_g000_prci_vtable();
200108f0:	37d1                	jal	200108b4 <__metal_driver_sifive_fe310_g000_prci_vtable>
200108f2:	fea42023          	sw	a0,-32(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:22
    long cfg = vtable->get_reg(config_base, config_offset);
200108f6:	fe042783          	lw	a5,-32(s0)
200108fa:	439c                	lw	a5,0(a5)
200108fc:	fe842583          	lw	a1,-24(s0)
20010900:	fe442503          	lw	a0,-28(s0)
20010904:	9782                	jalr	a5
20010906:	fca42e23          	sw	a0,-36(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:24

    if ((cfg & CONFIG_ENABLE) == 0)
2001090a:	fdc42703          	lw	a4,-36(s0)
2001090e:	400007b7          	lui	a5,0x40000
20010912:	8ff9                	and	a5,a5,a4
20010914:	e399                	bnez	a5,2001091a <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x54>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:25
        return -1;
20010916:	57fd                	li	a5,-1
20010918:	a821                	j	20010930 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x6a>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:26
    if ((cfg & CONFIG_READY) == 0)
2001091a:	fdc42783          	lw	a5,-36(s0)
2001091e:	0007c463          	bltz	a5,20010926 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x60>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:27
        return -1;
20010922:	57fd                	li	a5,-1
20010924:	a031                	j	20010930 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x6a>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:28
    return metal_clock_get_rate_hz(ref);
20010926:	fec42503          	lw	a0,-20(s0)
2001092a:	784000ef          	jal	ra,200110ae <metal_clock_get_rate_hz>
2001092e:	87aa                	mv	a5,a0
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:29
}
20010930:	853e                	mv	a0,a5
20010932:	50f2                	lw	ra,60(sp)
20010934:	5462                	lw	s0,56(sp)
20010936:	6121                	addi	sp,sp,64
20010938:	8082                	ret

2001093a <__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:32

long __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz(struct metal_clock *clock, long rate)
{
2001093a:	1101                	addi	sp,sp,-32
2001093c:	ce06                	sw	ra,28(sp)
2001093e:	cc22                	sw	s0,24(sp)
20010940:	1000                	addi	s0,sp,32
20010942:	fea42623          	sw	a0,-20(s0)
20010946:	feb42423          	sw	a1,-24(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:33
    return __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(clock);
2001094a:	fec42503          	lw	a0,-20(s0)
2001094e:	3fa5                	jal	200108c6 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>
20010950:	87aa                	mv	a5,a0
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:34
}
20010952:	853e                	mv	a0,a5
20010954:	40f2                	lw	ra,28(sp)
20010956:	4462                	lw	s0,24(sp)
20010958:	6105                	addi	sp,sp,32
2001095a:	8082                	ret

2001095c <__metal_driver_sifive_fe310_g000_pll_pllsel0>:
__metal_driver_sifive_fe310_g000_pll_pllsel0():
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:995
{
2001095c:	1101                	addi	sp,sp,-32
2001095e:	ce22                	sw	s0,28(sp)
20010960:	1000                	addi	s0,sp,32
20010962:	fea42623          	sw	a0,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:996
		return (struct metal_clock *)&__metal_dt_clock_3.clock;
20010966:	800007b7          	lui	a5,0x80000
2001096a:	09078793          	addi	a5,a5,144 # 80000090 <__global_pointer$+0xfffff7d8>
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:997
}
2001096e:	853e                	mv	a0,a5
20010970:	4472                	lw	s0,28(sp)
20010972:	6105                	addi	sp,sp,32
20010974:	8082                	ret

20010976 <__metal_driver_sifive_fe310_g000_pll_pllref>:
__metal_driver_sifive_fe310_g000_pll_pllref():
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1000
{
20010976:	1101                	addi	sp,sp,-32
20010978:	ce22                	sw	s0,28(sp)
2001097a:	1000                	addi	s0,sp,32
2001097c:	fea42623          	sw	a0,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1001
		return (struct metal_clock *)&__metal_dt_clock_1.clock;
20010980:	800007b7          	lui	a5,0x80000
20010984:	09c78793          	addi	a5,a5,156 # 8000009c <__global_pointer$+0xfffff7e4>
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1002
}
20010988:	853e                	mv	a0,a5
2001098a:	4472                	lw	s0,28(sp)
2001098c:	6105                	addi	sp,sp,32
2001098e:	8082                	ret

20010990 <__metal_driver_sifive_fe310_g000_pll_divider_base>:
__metal_driver_sifive_fe310_g000_pll_divider_base():
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1005
{
20010990:	1101                	addi	sp,sp,-32
20010992:	ce22                	sw	s0,28(sp)
20010994:	1000                	addi	s0,sp,32
20010996:	fea42623          	sw	a0,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1006
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
2001099a:	800007b7          	lui	a5,0x80000
2001099e:	0bc78793          	addi	a5,a5,188 # 800000bc <__global_pointer$+0xfffff804>
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1007
}
200109a2:	853e                	mv	a0,a5
200109a4:	4472                	lw	s0,28(sp)
200109a6:	6105                	addi	sp,sp,32
200109a8:	8082                	ret

200109aa <__metal_driver_sifive_fe310_g000_pll_divider_offset>:
__metal_driver_sifive_fe310_g000_pll_divider_offset():
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1010
{
200109aa:	1101                	addi	sp,sp,-32
200109ac:	ce22                	sw	s0,28(sp)
200109ae:	1000                	addi	s0,sp,32
200109b0:	fea42623          	sw	a0,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1011
		return METAL_SIFIVE_FE310_G000_PRCI_PLLOUTDIV;
200109b4:	47b1                	li	a5,12
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1012
}
200109b6:	853e                	mv	a0,a5
200109b8:	4472                	lw	s0,28(sp)
200109ba:	6105                	addi	sp,sp,32
200109bc:	8082                	ret

200109be <__metal_driver_sifive_fe310_g000_pll_config_base>:
__metal_driver_sifive_fe310_g000_pll_config_base():
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1015
{
200109be:	1141                	addi	sp,sp,-16
200109c0:	c622                	sw	s0,12(sp)
200109c2:	0800                	addi	s0,sp,16
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1016
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
200109c4:	800007b7          	lui	a5,0x80000
200109c8:	0bc78793          	addi	a5,a5,188 # 800000bc <__global_pointer$+0xfffff804>
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1017
}
200109cc:	853e                	mv	a0,a5
200109ce:	4432                	lw	s0,12(sp)
200109d0:	0141                	addi	sp,sp,16
200109d2:	8082                	ret

200109d4 <__metal_driver_sifive_fe310_g000_pll_config_offset>:
__metal_driver_sifive_fe310_g000_pll_config_offset():
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1020
{
200109d4:	1141                	addi	sp,sp,-16
200109d6:	c622                	sw	s0,12(sp)
200109d8:	0800                	addi	s0,sp,16
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1021
		return METAL_SIFIVE_FE310_G000_PRCI_PLLCFG;
200109da:	47a1                	li	a5,8
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1022
}
200109dc:	853e                	mv	a0,a5
200109de:	4432                	lw	s0,12(sp)
200109e0:	0141                	addi	sp,sp,16
200109e2:	8082                	ret

200109e4 <__metal_driver_sifive_fe310_g000_pll_init_rate>:
__metal_driver_sifive_fe310_g000_pll_init_rate():
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1025
{
200109e4:	1141                	addi	sp,sp,-16
200109e6:	c622                	sw	s0,12(sp)
200109e8:	0800                	addi	s0,sp,16
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1026
		return 16000000;
200109ea:	00f427b7          	lui	a5,0xf42
200109ee:	40078793          	addi	a5,a5,1024 # f42400 <DELAY+0xf3a400>
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1027
}
200109f2:	853e                	mv	a0,a5
200109f4:	4432                	lw	s0,12(sp)
200109f6:	0141                	addi	sp,sp,16
200109f8:	8082                	ret

200109fa <__metal_driver_sifive_fe310_g000_prci_base>:
__metal_driver_sifive_fe310_g000_prci_base():
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1033
{
200109fa:	1141                	addi	sp,sp,-16
200109fc:	c622                	sw	s0,12(sp)
200109fe:	0800                	addi	s0,sp,16
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1034
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_BASE_ADDRESS;
20010a00:	100087b7          	lui	a5,0x10008
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1035
}
20010a04:	853e                	mv	a0,a5
20010a06:	4432                	lw	s0,12(sp)
20010a08:	0141                	addi	sp,sp,16
20010a0a:	8082                	ret

20010a0c <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1043
{
20010a0c:	1141                	addi	sp,sp,-16
20010a0e:	c622                	sw	s0,12(sp)
20010a10:	0800                	addi	s0,sp,16
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1044
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
20010a12:	81818793          	addi	a5,gp,-2024 # 800000d0 <__metal_driver_vtable_sifive_fe310_g000_prci>
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1045
}
20010a16:	853e                	mv	a0,a5
20010a18:	4432                	lw	s0,12(sp)
20010a1a:	0141                	addi	sp,sp,16
20010a1c:	8082                	ret

20010a1e <get_pll_config_freq>:
get_pll_config_freq():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:137
 *  - config the PLL configuration
 * Returns:
 *  - PLL_CONFIG_NOT_VALID if the configuration is not valid for the input frequency
 *  - the output frequency, in hertz */
static long get_pll_config_freq(unsigned long pll_input_rate, const struct pll_config_t *config)
{
20010a1e:	1101                	addi	sp,sp,-32
20010a20:	ce22                	sw	s0,28(sp)
20010a22:	1000                	addi	s0,sp,32
20010a24:	fea42623          	sw	a0,-20(s0)
20010a28:	feb42423          	sw	a1,-24(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:138
    if(pll_input_rate < config->min_input_rate || pll_input_rate > config->max_input_rate)
20010a2c:	fe842783          	lw	a5,-24(s0)
20010a30:	479c                	lw	a5,8(a5)
20010a32:	fec42703          	lw	a4,-20(s0)
20010a36:	00f76963          	bltu	a4,a5,20010a48 <get_pll_config_freq+0x2a>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:138 (discriminator 1)
20010a3a:	fe842783          	lw	a5,-24(s0)
20010a3e:	47dc                	lw	a5,12(a5)
20010a40:	fec42703          	lw	a4,-20(s0)
20010a44:	00e7f463          	bgeu	a5,a4,20010a4c <get_pll_config_freq+0x2e>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:139
        return PLL_CONFIG_NOT_VALID;
20010a48:	57fd                	li	a5,-1
20010a4a:	a829                	j	20010a64 <get_pll_config_freq+0x46>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:141

    return pll_input_rate * config->multiplier / config->divisor;
20010a4c:	fe842783          	lw	a5,-24(s0)
20010a50:	4398                	lw	a4,0(a5)
20010a52:	fec42783          	lw	a5,-20(s0)
20010a56:	02f70733          	mul	a4,a4,a5
20010a5a:	fe842783          	lw	a5,-24(s0)
20010a5e:	43dc                	lw	a5,4(a5)
20010a60:	02f757b3          	divu	a5,a4,a5
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:142
}
20010a64:	853e                	mv	a0,a5
20010a66:	4472                	lw	s0,28(sp)
20010a68:	6105                	addi	sp,sp,32
20010a6a:	8082                	ret

20010a6c <metal_sifive_fe310_g000_pll_init>:
metal_sifive_fe310_g000_pll_init():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:147

#ifdef __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE

static void metal_sifive_fe310_g000_pll_init(void) __attribute__((constructor));
static void metal_sifive_fe310_g000_pll_init(void) {
20010a6c:	1101                	addi	sp,sp,-32
20010a6e:	ce06                	sw	ra,28(sp)
20010a70:	cc22                	sw	s0,24(sp)
20010a72:	1000                	addi	s0,sp,32
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:148
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20010a74:	3f85                	jal	200109e4 <__metal_driver_sifive_fe310_g000_pll_init_rate>
20010a76:	fea42623          	sw	a0,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:150
    /* If the PLL init_rate is zero, don't initialize the PLL */
    if(init_rate != 0)
20010a7a:	fec42783          	lw	a5,-20(s0)
20010a7e:	c791                	beqz	a5,20010a8a <metal_sifive_fe310_g000_pll_init+0x1e>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:151
        __metal_driver_sifive_fe310_g000_pll_init(__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE);
20010a80:	800007b7          	lui	a5,0x80000
20010a84:	0a878513          	addi	a0,a5,168 # 800000a8 <__global_pointer$+0xfffff7f0>
20010a88:	2031                	jal	20010a94 <__metal_driver_sifive_fe310_g000_pll_init>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:152
}
20010a8a:	0001                	nop
20010a8c:	40f2                	lw	ra,28(sp)
20010a8e:	4462                	lw	s0,24(sp)
20010a90:	6105                	addi	sp,sp,32
20010a92:	8082                	ret

20010a94 <__metal_driver_sifive_fe310_g000_pll_init>:
__metal_driver_sifive_fe310_g000_pll_init():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:156

#endif /* __METAL_DT_SIFIVE_FE310_G000__PLL_HANDLE */

void __metal_driver_sifive_fe310_g000_pll_init(struct __metal_driver_sifive_fe310_g000_pll *pll) {
20010a94:	7139                	addi	sp,sp,-64
20010a96:	de06                	sw	ra,60(sp)
20010a98:	dc22                	sw	s0,56(sp)
20010a9a:	0080                	addi	s0,sp,64
20010a9c:	fca42623          	sw	a0,-52(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:157
    struct metal_clock *pllref = __metal_driver_sifive_fe310_g000_pll_pllref(&(pll->clock));
20010aa0:	fcc42783          	lw	a5,-52(s0)
20010aa4:	853e                	mv	a0,a5
20010aa6:	3dc1                	jal	20010976 <__metal_driver_sifive_fe310_g000_pll_pllref>
20010aa8:	fea42623          	sw	a0,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:158
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20010aac:	3f25                	jal	200109e4 <__metal_driver_sifive_fe310_g000_pll_init_rate>
20010aae:	fea42423          	sw	a0,-24(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:159
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset();
20010ab2:	370d                	jal	200109d4 <__metal_driver_sifive_fe310_g000_pll_config_offset>
20010ab4:	fea42223          	sw	a0,-28(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:160
    long base = __metal_driver_sifive_fe310_g000_prci_base();
20010ab8:	3789                	jal	200109fa <__metal_driver_sifive_fe310_g000_prci_base>
20010aba:	fea42023          	sw	a0,-32(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:162

    __metal_io_u32 *pllcfg = (__metal_io_u32 *) (base + config_offset);
20010abe:	fe042703          	lw	a4,-32(s0)
20010ac2:	fe442783          	lw	a5,-28(s0)
20010ac6:	97ba                	add	a5,a5,a4
20010ac8:	fcf42e23          	sw	a5,-36(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:165

    /* If the PLL clock has had a _pre_rate_change_callback configured, call it */
    _metal_clock_call_all_callbacks(pll->clock._pre_rate_change_callback);
20010acc:	fcc42783          	lw	a5,-52(s0)
20010ad0:	43dc                	lw	a5,4(a5)
20010ad2:	853e                	mv	a0,a5
20010ad4:	2b69                	jal	2001106e <_metal_clock_call_all_callbacks>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:168

    /* If we're running off of the PLL, switch off before we start configuring it*/
    if((__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL) == 0)
20010ad6:	fdc42783          	lw	a5,-36(s0)
20010ada:	4398                	lw	a4,0(a5)
20010adc:	67c1                	lui	a5,0x10
20010ade:	8ff9                	and	a5,a5,a4
20010ae0:	eb91                	bnez	a5,20010af4 <__metal_driver_sifive_fe310_g000_pll_init+0x60>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:169
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
20010ae2:	fdc42783          	lw	a5,-36(s0)
20010ae6:	4398                	lw	a4,0(a5)
20010ae8:	77c1                	lui	a5,0xffff0
20010aea:	17fd                	addi	a5,a5,-1
20010aec:	8f7d                	and	a4,a4,a5
20010aee:	fdc42783          	lw	a5,-36(s0)
20010af2:	c398                	sw	a4,0(a5)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:172

    /* Make sure we're running off of the external oscillator for stability */
    if(pllref != NULL)
20010af4:	fec42783          	lw	a5,-20(s0)
20010af8:	cb91                	beqz	a5,20010b0c <__metal_driver_sifive_fe310_g000_pll_init+0x78>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:173
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_REFSEL;
20010afa:	fdc42783          	lw	a5,-36(s0)
20010afe:	4398                	lw	a4,0(a5)
20010b00:	000207b7          	lui	a5,0x20
20010b04:	8f5d                	or	a4,a4,a5
20010b06:	fdc42783          	lw	a5,-36(s0)
20010b0a:	c398                	sw	a4,0(a5)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:178

    /* Configure the PLL to run at the requested init frequency.
     * Using the vtable instead of the user API because we want to control
     * when the callbacks occur. */
    pll->clock.vtable->set_rate_hz(&(pll->clock), init_rate);
20010b0c:	fcc42783          	lw	a5,-52(s0)
20010b10:	439c                	lw	a5,0(a5)
20010b12:	43d8                	lw	a4,4(a5)
20010b14:	fcc42783          	lw	a5,-52(s0)
20010b18:	fe842583          	lw	a1,-24(s0)
20010b1c:	853e                	mv	a0,a5
20010b1e:	9702                	jalr	a4
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:181

    /* If the PLL clock has had a rate_change_callback configured, call it */
    _metal_clock_call_all_callbacks(pll->clock._post_rate_change_callback);
20010b20:	fcc42783          	lw	a5,-52(s0)
20010b24:	479c                	lw	a5,8(a5)
20010b26:	853e                	mv	a0,a5
20010b28:	2399                	jal	2001106e <_metal_clock_call_all_callbacks>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:182
}
20010b2a:	0001                	nop
20010b2c:	50f2                	lw	ra,60(sp)
20010b2e:	5462                	lw	s0,56(sp)
20010b30:	6121                	addi	sp,sp,64
20010b32:	8082                	ret

20010b34 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_get_rate_hz():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:185

long __metal_driver_sifive_fe310_g000_pll_get_rate_hz(const struct metal_clock *clock)
{
20010b34:	711d                	addi	sp,sp,-96
20010b36:	ce86                	sw	ra,92(sp)
20010b38:	cca2                	sw	s0,88(sp)
20010b3a:	1080                	addi	s0,sp,96
20010b3c:	faa42623          	sw	a0,-84(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:186
    struct metal_clock *pllref = __metal_driver_sifive_fe310_g000_pll_pllref(clock);
20010b40:	fac42503          	lw	a0,-84(s0)
20010b44:	3d0d                	jal	20010976 <__metal_driver_sifive_fe310_g000_pll_pllref>
20010b46:	fea42623          	sw	a0,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:187
    struct metal_clock *pllsel0 = __metal_driver_sifive_fe310_g000_pll_pllsel0(clock);
20010b4a:	fac42503          	lw	a0,-84(s0)
20010b4e:	3539                	jal	2001095c <__metal_driver_sifive_fe310_g000_pll_pllsel0>
20010b50:	fea42423          	sw	a0,-24(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:188
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset(clock);
20010b54:	fac42503          	lw	a0,-84(s0)
20010b58:	3db5                	jal	200109d4 <__metal_driver_sifive_fe310_g000_pll_config_offset>
20010b5a:	fea42223          	sw	a0,-28(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:190
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
      __metal_driver_sifive_fe310_g000_pll_config_base(clock);
20010b5e:	fac42503          	lw	a0,-84(s0)
20010b62:	3db1                	jal	200109be <__metal_driver_sifive_fe310_g000_pll_config_base>
20010b64:	fea42023          	sw	a0,-32(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:191
    long divider_offset = __metal_driver_sifive_fe310_g000_pll_divider_offset(clock);
20010b68:	fac42503          	lw	a0,-84(s0)
20010b6c:	3d3d                	jal	200109aa <__metal_driver_sifive_fe310_g000_pll_divider_offset>
20010b6e:	fca42e23          	sw	a0,-36(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:193
    struct __metal_driver_sifive_fe310_g000_prci *divider_base =
      __metal_driver_sifive_fe310_g000_pll_divider_base(clock);
20010b72:	fac42503          	lw	a0,-84(s0)
20010b76:	3d29                	jal	20010990 <__metal_driver_sifive_fe310_g000_pll_divider_base>
20010b78:	fca42c23          	sw	a0,-40(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:195
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
      __metal_driver_sifive_fe310_g000_prci_vtable();
20010b7c:	3d41                	jal	20010a0c <__metal_driver_sifive_fe310_g000_prci_vtable>
20010b7e:	fca42a23          	sw	a0,-44(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:197

    long cfg = vtable->get_reg(config_base, config_offset);
20010b82:	fd442783          	lw	a5,-44(s0)
20010b86:	439c                	lw	a5,0(a5)
20010b88:	fe442583          	lw	a1,-28(s0)
20010b8c:	fe042503          	lw	a0,-32(s0)
20010b90:	9782                	jalr	a5
20010b92:	fca42823          	sw	a0,-48(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:198
    long div = vtable->get_reg(divider_base, divider_offset);
20010b96:	fd442783          	lw	a5,-44(s0)
20010b9a:	439c                	lw	a5,0(a5)
20010b9c:	fdc42583          	lw	a1,-36(s0)
20010ba0:	fd842503          	lw	a0,-40(s0)
20010ba4:	9782                	jalr	a5
20010ba6:	fca42623          	sw	a0,-52(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:202

    /* At the end of the PLL there's one big mux: it either selects the HFROSC
     * (bypassing the PLL entirely) or uses the PLL. */
    if (__METAL_GET_FIELD(cfg, PLL_SEL) == 0)
20010baa:	fd042703          	lw	a4,-48(s0)
20010bae:	67c1                	lui	a5,0x10
20010bb0:	8f7d                	and	a4,a4,a5
20010bb2:	67c1                	lui	a5,0x10
20010bb4:	00f77763          	bgeu	a4,a5,20010bc2 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x8e>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:203
        return metal_clock_get_rate_hz(pllsel0);
20010bb8:	fe842503          	lw	a0,-24(s0)
20010bbc:	29cd                	jal	200110ae <metal_clock_get_rate_hz>
20010bbe:	87aa                	mv	a5,a0
20010bc0:	a8d9                	j	20010c96 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x162>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207

    /* There's a clock mux before the PLL that selects between the HFROSC adn
     * the HFXOSC as the PLL's input clock. */
    long ref_hz = metal_clock_get_rate_hz(__METAL_GET_FIELD(cfg, PLL_REFSEL) ? pllref : pllsel0);
20010bc2:	fd042703          	lw	a4,-48(s0)
20010bc6:	000207b7          	lui	a5,0x20
20010bca:	8f7d                	and	a4,a4,a5
20010bcc:	000207b7          	lui	a5,0x20
20010bd0:	00f76563          	bltu	a4,a5,20010bda <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xa6>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207 (discriminator 1)
20010bd4:	fec42783          	lw	a5,-20(s0)
20010bd8:	a019                	j	20010bde <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xaa>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207 (discriminator 2)
20010bda:	fe842783          	lw	a5,-24(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207 (discriminator 4)
20010bde:	853e                	mv	a0,a5
20010be0:	21f9                	jal	200110ae <metal_clock_get_rate_hz>
20010be2:	fca42423          	sw	a0,-56(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:211 (discriminator 4)

    /* It's possible to bypass the PLL, which is an internal bpyass.  This
     * still obays the PLL's input clock mu. */
    if (__METAL_GET_FIELD(cfg, PLL_BYPASS))
20010be6:	fd042703          	lw	a4,-48(s0)
20010bea:	000407b7          	lui	a5,0x40
20010bee:	8f7d                	and	a4,a4,a5
20010bf0:	000407b7          	lui	a5,0x40
20010bf4:	00f76563          	bltu	a4,a5,20010bfe <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xca>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:212
        return ref_hz;
20010bf8:	fc842783          	lw	a5,-56(s0)
20010bfc:	a869                	j	20010c96 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x162>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:215

    /* Logically the PLL is a three stage div-mul-div. */
    long div_r = __METAL_GET_FIELD(cfg, PLL_R) + 1;
20010bfe:	fd042783          	lw	a5,-48(s0)
20010c02:	8b9d                	andi	a5,a5,7
20010c04:	0785                	addi	a5,a5,1
20010c06:	fcf42223          	sw	a5,-60(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:216
    long mul_f = 2 * (__METAL_GET_FIELD(cfg, PLL_F) + 1);
20010c0a:	fd042783          	lw	a5,-48(s0)
20010c0e:	3f07f793          	andi	a5,a5,1008
20010c12:	8391                	srli	a5,a5,0x4
20010c14:	0785                	addi	a5,a5,1
20010c16:	0786                	slli	a5,a5,0x1
20010c18:	fcf42023          	sw	a5,-64(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:217
    if (__METAL_GET_FIELD(cfg, PLL_Q) == 0)
20010c1c:	fd042703          	lw	a4,-48(s0)
20010c20:	6785                	lui	a5,0x1
20010c22:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
20010c26:	8f7d                	and	a4,a4,a5
20010c28:	3ff00793          	li	a5,1023
20010c2c:	00e7e463          	bltu	a5,a4,20010c34 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x100>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:218
        return -1;
20010c30:	57fd                	li	a5,-1
20010c32:	a095                	j	20010c96 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x162>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:219
    long div_q = 1 << __METAL_GET_FIELD(cfg, PLL_Q);
20010c34:	fd042703          	lw	a4,-48(s0)
20010c38:	6785                	lui	a5,0x1
20010c3a:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
20010c3e:	8ff9                	and	a5,a5,a4
20010c40:	83a9                	srli	a5,a5,0xa
20010c42:	4705                	li	a4,1
20010c44:	00f717b3          	sll	a5,a4,a5
20010c48:	faf42e23          	sw	a5,-68(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:224

    /* In addition to the dividers inherent in the PLL, there's an additional
     * clock divider that lives after the PLL and lets us pick a more
     * interesting range of frequencies. */
    long pllout = (((ref_hz / div_r) * mul_f) / div_q);
20010c4c:	fc842703          	lw	a4,-56(s0)
20010c50:	fc442783          	lw	a5,-60(s0)
20010c54:	02f74733          	div	a4,a4,a5
20010c58:	fc042783          	lw	a5,-64(s0)
20010c5c:	02f70733          	mul	a4,a4,a5
20010c60:	fbc42783          	lw	a5,-68(s0)
20010c64:	02f747b3          	div	a5,a4,a5
20010c68:	faf42c23          	sw	a5,-72(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:225
    if (__METAL_GET_FIELD(div, DIV_1))
20010c6c:	fcc42783          	lw	a5,-52(s0)
20010c70:	1007f713          	andi	a4,a5,256
20010c74:	0ff00793          	li	a5,255
20010c78:	00e7f563          	bgeu	a5,a4,20010c82 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x14e>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:226
        return pllout;
20010c7c:	fb842783          	lw	a5,-72(s0)
20010c80:	a819                	j	20010c96 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x162>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:228

    return pllout / (2 * (__METAL_GET_FIELD(div, DIV_DIV) + 1));
20010c82:	fb842703          	lw	a4,-72(s0)
20010c86:	fcc42783          	lw	a5,-52(s0)
20010c8a:	03f7f793          	andi	a5,a5,63
20010c8e:	0785                	addi	a5,a5,1
20010c90:	0786                	slli	a5,a5,0x1
20010c92:	02f757b3          	divu	a5,a4,a5
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:229
}
20010c96:	853e                	mv	a0,a5
20010c98:	40f6                	lw	ra,92(sp)
20010c9a:	4466                	lw	s0,88(sp)
20010c9c:	6125                	addi	sp,sp,96
20010c9e:	8082                	ret

20010ca0 <find_closest_config>:
find_closest_config():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:240
 *  - rate desired PLL output frequency
 * Returns:
 *  -1 if no valid configuration is available
 *  the index into pll_configs of a valid configuration */
static int find_closest_config(long ref_hz, long rate)
{
20010ca0:	7139                	addi	sp,sp,-64
20010ca2:	de06                	sw	ra,60(sp)
20010ca4:	dc22                	sw	s0,56(sp)
20010ca6:	0080                	addi	s0,sp,64
20010ca8:	fca42623          	sw	a0,-52(s0)
20010cac:	fcb42423          	sw	a1,-56(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:241
    int closest_index = -1;
20010cb0:	57fd                	li	a5,-1
20010cb2:	fef42623          	sw	a5,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:242
    long closest_diff = LONG_MAX;
20010cb6:	800007b7          	lui	a5,0x80000
20010cba:	fff7c793          	not	a5,a5
20010cbe:	fef42423          	sw	a5,-24(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:246

    /* We're probably trying for a fast output frequency, so start from
     * the high end of the configs. */
    for(int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0; i--)
20010cc2:	04300793          	li	a5,67
20010cc6:	fef42223          	sw	a5,-28(s0)
20010cca:	a0ad                	j	20010d34 <find_closest_config+0x94>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:248
    {
        long config_freq = get_pll_config_freq(ref_hz, &(pll_configs[i]));
20010ccc:	fcc42683          	lw	a3,-52(s0)
20010cd0:	fe442783          	lw	a5,-28(s0)
20010cd4:	00579713          	slli	a4,a5,0x5
20010cd8:	200117b7          	lui	a5,0x20011
20010cdc:	20078793          	addi	a5,a5,512 # 20011200 <pll_configs>
20010ce0:	97ba                	add	a5,a5,a4
20010ce2:	85be                	mv	a1,a5
20010ce4:	8536                	mv	a0,a3
20010ce6:	3b25                	jal	20010a1e <get_pll_config_freq>
20010ce8:	fea42023          	sw	a0,-32(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:249
        if(config_freq != PLL_CONFIG_NOT_VALID)
20010cec:	fe042703          	lw	a4,-32(s0)
20010cf0:	57fd                	li	a5,-1
20010cf2:	02f70c63          	beq	a4,a5,20010d2a <find_closest_config+0x8a>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:251
        {
            long freq_diff = abs(config_freq - rate);
20010cf6:	fe042703          	lw	a4,-32(s0)
20010cfa:	fc842783          	lw	a5,-56(s0)
20010cfe:	8f1d                	sub	a4,a4,a5
20010d00:	41f75793          	srai	a5,a4,0x1f
20010d04:	8f3d                	xor	a4,a4,a5
20010d06:	40f707b3          	sub	a5,a4,a5
20010d0a:	fcf42e23          	sw	a5,-36(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:252
            if(freq_diff < closest_diff)
20010d0e:	fdc42703          	lw	a4,-36(s0)
20010d12:	fe842783          	lw	a5,-24(s0)
20010d16:	00f75a63          	bge	a4,a5,20010d2a <find_closest_config+0x8a>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:254
            {
                closest_index = i;
20010d1a:	fe442783          	lw	a5,-28(s0)
20010d1e:	fef42623          	sw	a5,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:255
                closest_diff = freq_diff;
20010d22:	fdc42783          	lw	a5,-36(s0)
20010d26:	fef42423          	sw	a5,-24(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:246 (discriminator 2)
    for(int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0; i--)
20010d2a:	fe442783          	lw	a5,-28(s0)
20010d2e:	17fd                	addi	a5,a5,-1
20010d30:	fef42223          	sw	a5,-28(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:246 (discriminator 1)
20010d34:	fe442783          	lw	a5,-28(s0)
20010d38:	f807dae3          	bgez	a5,20010ccc <find_closest_config+0x2c>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:260
            }
        }
    }

    return closest_index;
20010d3c:	fec42783          	lw	a5,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:261
}
20010d40:	853e                	mv	a0,a5
20010d42:	50f2                	lw	ra,60(sp)
20010d44:	5462                	lw	s0,56(sp)
20010d46:	6121                	addi	sp,sp,64
20010d48:	8082                	ret

20010d4a <configure_pll>:
configure_pll():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:265

/* Configure the PLL and wait for it to lock */
static void configure_pll(__metal_io_u32 *pllcfg, __metal_io_u32 *plloutdiv, const struct pll_config_t *config)
{
20010d4a:	1101                	addi	sp,sp,-32
20010d4c:	ce22                	sw	s0,28(sp)
20010d4e:	1000                	addi	s0,sp,32
20010d50:	fea42623          	sw	a0,-20(s0)
20010d54:	feb42423          	sw	a1,-24(s0)
20010d58:	fec42223          	sw	a2,-28(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:266
    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_R);
20010d5c:	fec42783          	lw	a5,-20(s0)
20010d60:	439c                	lw	a5,0(a5)
20010d62:	ff87f713          	andi	a4,a5,-8
20010d66:	fec42783          	lw	a5,-20(s0)
20010d6a:	c398                	sw	a4,0(a5)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:267
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_R_SHIFT(config->r);
20010d6c:	fec42783          	lw	a5,-20(s0)
20010d70:	4398                	lw	a4,0(a5)
20010d72:	fe442783          	lw	a5,-28(s0)
20010d76:	4b9c                	lw	a5,16(a5)
20010d78:	8b9d                	andi	a5,a5,7
20010d7a:	8f5d                	or	a4,a4,a5
20010d7c:	fec42783          	lw	a5,-20(s0)
20010d80:	c398                	sw	a4,0(a5)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:269

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_F);
20010d82:	fec42783          	lw	a5,-20(s0)
20010d86:	439c                	lw	a5,0(a5)
20010d88:	c0f7f713          	andi	a4,a5,-1009
20010d8c:	fec42783          	lw	a5,-20(s0)
20010d90:	c398                	sw	a4,0(a5)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:270
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_F_SHIFT(config->f);
20010d92:	fec42783          	lw	a5,-20(s0)
20010d96:	4398                	lw	a4,0(a5)
20010d98:	fe442783          	lw	a5,-28(s0)
20010d9c:	4bdc                	lw	a5,20(a5)
20010d9e:	0792                	slli	a5,a5,0x4
20010da0:	3f07f793          	andi	a5,a5,1008
20010da4:	8f5d                	or	a4,a4,a5
20010da6:	fec42783          	lw	a5,-20(s0)
20010daa:	c398                	sw	a4,0(a5)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:272

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_Q);
20010dac:	fec42783          	lw	a5,-20(s0)
20010db0:	4398                	lw	a4,0(a5)
20010db2:	77fd                	lui	a5,0xfffff
20010db4:	3ff78793          	addi	a5,a5,1023 # fffff3ff <__global_pointer$+0x7fffeb47>
20010db8:	8f7d                	and	a4,a4,a5
20010dba:	fec42783          	lw	a5,-20(s0)
20010dbe:	c398                	sw	a4,0(a5)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:273
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_Q_SHIFT(config->q);
20010dc0:	fec42783          	lw	a5,-20(s0)
20010dc4:	4398                	lw	a4,0(a5)
20010dc6:	fe442783          	lw	a5,-28(s0)
20010dca:	4f9c                	lw	a5,24(a5)
20010dcc:	00a79693          	slli	a3,a5,0xa
20010dd0:	6785                	lui	a5,0x1
20010dd2:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
20010dd6:	8ff5                	and	a5,a5,a3
20010dd8:	8f5d                	or	a4,a4,a5
20010dda:	fec42783          	lw	a5,-20(s0)
20010dde:	c398                	sw	a4,0(a5)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:275

    if(config->d < 0)
20010de0:	fe442783          	lw	a5,-28(s0)
20010de4:	4fdc                	lw	a5,28(a5)
20010de6:	0207db63          	bgez	a5,20010e1c <configure_pll+0xd2>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:278
    {
        /* disable final divider */
        __METAL_ACCESS_ONCE(plloutdiv) |= DIV_1;
20010dea:	fe842783          	lw	a5,-24(s0)
20010dee:	439c                	lw	a5,0(a5)
20010df0:	1007e713          	ori	a4,a5,256
20010df4:	fe842783          	lw	a5,-24(s0)
20010df8:	c398                	sw	a4,0(a5)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:280

        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
20010dfa:	fe842783          	lw	a5,-24(s0)
20010dfe:	439c                	lw	a5,0(a5)
20010e00:	fc07f713          	andi	a4,a5,-64
20010e04:	fe842783          	lw	a5,-24(s0)
20010e08:	c398                	sw	a4,0(a5)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:281
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(1);
20010e0a:	fe842783          	lw	a5,-24(s0)
20010e0e:	439c                	lw	a5,0(a5)
20010e10:	0017e713          	ori	a4,a5,1
20010e14:	fe842783          	lw	a5,-24(s0)
20010e18:	c398                	sw	a4,0(a5)
20010e1a:	a82d                	j	20010e54 <configure_pll+0x10a>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:285
    }
    else
    {
        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_1);
20010e1c:	fe842783          	lw	a5,-24(s0)
20010e20:	439c                	lw	a5,0(a5)
20010e22:	eff7f713          	andi	a4,a5,-257
20010e26:	fe842783          	lw	a5,-24(s0)
20010e2a:	c398                	sw	a4,0(a5)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:287

        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
20010e2c:	fe842783          	lw	a5,-24(s0)
20010e30:	439c                	lw	a5,0(a5)
20010e32:	fc07f713          	andi	a4,a5,-64
20010e36:	fe842783          	lw	a5,-24(s0)
20010e3a:	c398                	sw	a4,0(a5)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:288
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(config->d);
20010e3c:	fe842783          	lw	a5,-24(s0)
20010e40:	4398                	lw	a4,0(a5)
20010e42:	fe442783          	lw	a5,-28(s0)
20010e46:	4fdc                	lw	a5,28(a5)
20010e48:	03f7f793          	andi	a5,a5,63
20010e4c:	8f5d                	or	a4,a4,a5
20010e4e:	fe842783          	lw	a5,-24(s0)
20010e52:	c398                	sw	a4,0(a5)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:291
    }

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_BYPASS);
20010e54:	fec42783          	lw	a5,-20(s0)
20010e58:	4398                	lw	a4,0(a5)
20010e5a:	fffc07b7          	lui	a5,0xfffc0
20010e5e:	17fd                	addi	a5,a5,-1
20010e60:	8f7d                	and	a4,a4,a5
20010e62:	fec42783          	lw	a5,-20(s0)
20010e66:	c398                	sw	a4,0(a5)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:294

    /* Wait for PLL to lock */
    while((__METAL_ACCESS_ONCE(pllcfg) & PLL_LOCK) == 0) ;
20010e68:	0001                	nop
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:294 (discriminator 1)
20010e6a:	fec42783          	lw	a5,-20(s0)
20010e6e:	439c                	lw	a5,0(a5)
20010e70:	fe07dde3          	bgez	a5,20010e6a <configure_pll+0x120>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:295
}
20010e74:	0001                	nop
20010e76:	4472                	lw	s0,28(sp)
20010e78:	6105                	addi	sp,sp,32
20010e7a:	8082                	ret

20010e7c <__metal_driver_sifive_fe310_g000_pll_set_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_set_rate_hz():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:298

long __metal_driver_sifive_fe310_g000_pll_set_rate_hz(struct metal_clock *clock, long rate)
{
20010e7c:	715d                	addi	sp,sp,-80
20010e7e:	c686                	sw	ra,76(sp)
20010e80:	c4a2                	sw	s0,72(sp)
20010e82:	0880                	addi	s0,sp,80
20010e84:	faa42e23          	sw	a0,-68(s0)
20010e88:	fab42c23          	sw	a1,-72(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:299
    struct metal_clock *pllref = __metal_driver_sifive_fe310_g000_pll_pllref(clock);
20010e8c:	fbc42503          	lw	a0,-68(s0)
20010e90:	34dd                	jal	20010976 <__metal_driver_sifive_fe310_g000_pll_pllref>
20010e92:	fea42623          	sw	a0,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:300
    struct metal_clock *pllsel0 = __metal_driver_sifive_fe310_g000_pll_pllsel0(clock);
20010e96:	fbc42503          	lw	a0,-68(s0)
20010e9a:	34c9                	jal	2001095c <__metal_driver_sifive_fe310_g000_pll_pllsel0>
20010e9c:	fea42423          	sw	a0,-24(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:301
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset(clock);
20010ea0:	fbc42503          	lw	a0,-68(s0)
20010ea4:	3e05                	jal	200109d4 <__metal_driver_sifive_fe310_g000_pll_config_offset>
20010ea6:	fea42223          	sw	a0,-28(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:302
    long divider_offset = __metal_driver_sifive_fe310_g000_pll_divider_offset(clock);
20010eaa:	fbc42503          	lw	a0,-68(s0)
20010eae:	3cf5                	jal	200109aa <__metal_driver_sifive_fe310_g000_pll_divider_offset>
20010eb0:	fea42023          	sw	a0,-32(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:303
    long base = __metal_driver_sifive_fe310_g000_prci_base();
20010eb4:	3699                	jal	200109fa <__metal_driver_sifive_fe310_g000_prci_base>
20010eb6:	fca42e23          	sw	a0,-36(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:305

    __metal_io_u32 *pllcfg = (__metal_io_u32 *) (base + config_offset);
20010eba:	fdc42703          	lw	a4,-36(s0)
20010ebe:	fe442783          	lw	a5,-28(s0)
20010ec2:	97ba                	add	a5,a5,a4
20010ec4:	fcf42c23          	sw	a5,-40(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:306
    __metal_io_u32 *plloutdiv = (__metal_io_u32 *) (base + divider_offset);
20010ec8:	fdc42703          	lw	a4,-36(s0)
20010ecc:	fe042783          	lw	a5,-32(s0)
20010ed0:	97ba                	add	a5,a5,a4
20010ed2:	fcf42a23          	sw	a5,-44(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:309

    /* We can't modify the PLL if coreclk is driven by it, so switch it off */
    if (__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL)
20010ed6:	fd842783          	lw	a5,-40(s0)
20010eda:	4398                	lw	a4,0(a5)
20010edc:	67c1                	lui	a5,0x10
20010ede:	8ff9                	and	a5,a5,a4
20010ee0:	cb91                	beqz	a5,20010ef4 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x78>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:310
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
20010ee2:	fd842783          	lw	a5,-40(s0)
20010ee6:	4398                	lw	a4,0(a5)
20010ee8:	77c1                	lui	a5,0xffff0
20010eea:	17fd                	addi	a5,a5,-1
20010eec:	8f7d                	and	a4,a4,a5
20010eee:	fd842783          	lw	a5,-40(s0)
20010ef2:	c398                	sw	a4,0(a5)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314

    /* There's a clock mux before the PLL that selects between the HFROSC and
     * the HFXOSC as the PLL's input clock. */
    long ref_hz = metal_clock_get_rate_hz(__METAL_ACCESS_ONCE(pllcfg) & PLL_REFSEL ? pllref : pllsel0);
20010ef4:	fd842783          	lw	a5,-40(s0)
20010ef8:	4398                	lw	a4,0(a5)
20010efa:	000207b7          	lui	a5,0x20
20010efe:	8ff9                	and	a5,a5,a4
20010f00:	c781                	beqz	a5,20010f08 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x8c>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314 (discriminator 1)
20010f02:	fec42783          	lw	a5,-20(s0)
20010f06:	a019                	j	20010f0c <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x90>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314 (discriminator 2)
20010f08:	fe842783          	lw	a5,-24(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314 (discriminator 4)
20010f0c:	853e                	mv	a0,a5
20010f0e:	2245                	jal	200110ae <metal_clock_get_rate_hz>
20010f10:	fca42823          	sw	a0,-48(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:317 (discriminator 4)

    /* if the desired rate is within 75%-125% of the input clock, bypass the PLL */
    if((ref_hz * 3 / 4) <= rate && (ref_hz * 5 / 4) >= rate)
20010f14:	fd042703          	lw	a4,-48(s0)
20010f18:	87ba                	mv	a5,a4
20010f1a:	0786                	slli	a5,a5,0x1
20010f1c:	97ba                	add	a5,a5,a4
20010f1e:	41f7d713          	srai	a4,a5,0x1f
20010f22:	8b0d                	andi	a4,a4,3
20010f24:	97ba                	add	a5,a5,a4
20010f26:	8789                	srai	a5,a5,0x2
20010f28:	873e                	mv	a4,a5
20010f2a:	fb842783          	lw	a5,-72(s0)
20010f2e:	02e7cb63          	blt	a5,a4,20010f64 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xe8>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:317 (discriminator 1)
20010f32:	fd042703          	lw	a4,-48(s0)
20010f36:	87ba                	mv	a5,a4
20010f38:	078a                	slli	a5,a5,0x2
20010f3a:	97ba                	add	a5,a5,a4
20010f3c:	41f7d713          	srai	a4,a5,0x1f
20010f40:	8b0d                	andi	a4,a4,3
20010f42:	97ba                	add	a5,a5,a4
20010f44:	8789                	srai	a5,a5,0x2
20010f46:	873e                	mv	a4,a5
20010f48:	fb842783          	lw	a5,-72(s0)
20010f4c:	00f74c63          	blt	a4,a5,20010f64 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xe8>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:319
    {
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
20010f50:	fd842783          	lw	a5,-40(s0)
20010f54:	4398                	lw	a4,0(a5)
20010f56:	000407b7          	lui	a5,0x40
20010f5a:	8f5d                	or	a4,a4,a5
20010f5c:	fd842783          	lw	a5,-40(s0)
20010f60:	c398                	sw	a4,0(a5)
20010f62:	a0b1                	j	20010fae <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x132>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:323
    }
    else
    {
        int config_index = find_closest_config(ref_hz, rate);
20010f64:	fb842583          	lw	a1,-72(s0)
20010f68:	fd042503          	lw	a0,-48(s0)
20010f6c:	3b15                	jal	20010ca0 <find_closest_config>
20010f6e:	fca42623          	sw	a0,-52(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:324
        if(config_index != -1)
20010f72:	fcc42703          	lw	a4,-52(s0)
20010f76:	57fd                	li	a5,-1
20010f78:	02f70263          	beq	a4,a5,20010f9c <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x120>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:326
        {
            configure_pll(pllcfg, plloutdiv, &(pll_configs[config_index]));
20010f7c:	fcc42783          	lw	a5,-52(s0)
20010f80:	00579713          	slli	a4,a5,0x5
20010f84:	200117b7          	lui	a5,0x20011
20010f88:	20078793          	addi	a5,a5,512 # 20011200 <pll_configs>
20010f8c:	97ba                	add	a5,a5,a4
20010f8e:	863e                	mv	a2,a5
20010f90:	fd442583          	lw	a1,-44(s0)
20010f94:	fd842503          	lw	a0,-40(s0)
20010f98:	3b4d                	jal	20010d4a <configure_pll>
20010f9a:	a811                	j	20010fae <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x132>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:331
        }
        else
        {
            /* unable to find a valid configuration */
            __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
20010f9c:	fd842783          	lw	a5,-40(s0)
20010fa0:	4398                	lw	a4,0(a5)
20010fa2:	000407b7          	lui	a5,0x40
20010fa6:	8f5d                	or	a4,a4,a5
20010fa8:	fd842783          	lw	a5,-40(s0)
20010fac:	c398                	sw	a4,0(a5)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:336
        }
    }

    /* Enable the PLL */
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_SEL;
20010fae:	fd842783          	lw	a5,-40(s0)
20010fb2:	4398                	lw	a4,0(a5)
20010fb4:	67c1                	lui	a5,0x10
20010fb6:	8f5d                	or	a4,a4,a5
20010fb8:	fd842783          	lw	a5,-40(s0)
20010fbc:	c398                	sw	a4,0(a5)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:338

    return __metal_driver_sifive_fe310_g000_pll_get_rate_hz(clock);
20010fbe:	fbc42503          	lw	a0,-68(s0)
20010fc2:	3e8d                	jal	20010b34 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>
20010fc4:	87aa                	mv	a5,a0
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:339
}
20010fc6:	853e                	mv	a0,a5
20010fc8:	40b6                	lw	ra,76(sp)
20010fca:	4426                	lw	s0,72(sp)
20010fcc:	6161                	addi	sp,sp,80
20010fce:	8082                	ret

20010fd0 <use_hfxosc>:
use_hfxosc():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:344

#ifdef __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE
static void use_hfxosc(void) __attribute__((constructor));
static void use_hfxosc(void)
{
20010fd0:	1101                	addi	sp,sp,-32
20010fd2:	ce06                	sw	ra,28(sp)
20010fd4:	cc22                	sw	s0,24(sp)
20010fd6:	1000                	addi	s0,sp,32
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:345
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20010fd8:	3431                	jal	200109e4 <__metal_driver_sifive_fe310_g000_pll_init_rate>
20010fda:	fea42623          	sw	a0,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:346
    metal_clock_set_rate_hz(
20010fde:	fec42583          	lw	a1,-20(s0)
20010fe2:	800007b7          	lui	a5,0x80000
20010fe6:	0a878513          	addi	a0,a5,168 # 800000a8 <__global_pointer$+0xfffff7f0>
20010fea:	20ed                	jal	200110d4 <metal_clock_set_rate_hz>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:349
        &__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE->clock, init_rate
    );
}
20010fec:	0001                	nop
20010fee:	40f2                	lw	ra,28(sp)
20010ff0:	4462                	lw	s0,24(sp)
20010ff2:	6105                	addi	sp,sp,32
20010ff4:	8082                	ret

20010ff6 <__metal_driver_sifive_fe310_g000_prci_base>:
__metal_driver_sifive_fe310_g000_prci_base():
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1033
{
20010ff6:	1141                	addi	sp,sp,-16
20010ff8:	c622                	sw	s0,12(sp)
20010ffa:	0800                	addi	s0,sp,16
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1034
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_BASE_ADDRESS;
20010ffc:	100087b7          	lui	a5,0x10008
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:1035
}
20011000:	853e                	mv	a0,a5
20011002:	4432                	lw	s0,12(sp)
20011004:	0141                	addi	sp,sp,16
20011006:	8082                	ret

20011008 <__metal_driver_sifive_fe310_g000_prci_get_reg>:
__metal_driver_sifive_fe310_g000_prci_get_reg():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:11
#ifdef METAL_SIFIVE_FE310_G000_PRCI

#include <metal/drivers/sifive_fe310-g000_prci.h>
#include <metal/machine.h>

long __metal_driver_sifive_fe310_g000_prci_get_reg(const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset) {
20011008:	7179                	addi	sp,sp,-48
2001100a:	d606                	sw	ra,44(sp)
2001100c:	d422                	sw	s0,40(sp)
2001100e:	1800                	addi	s0,sp,48
20011010:	fca42e23          	sw	a0,-36(s0)
20011014:	fcb42c23          	sw	a1,-40(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:12
    unsigned long base = __metal_driver_sifive_fe310_g000_prci_base();
20011018:	3ff9                	jal	20010ff6 <__metal_driver_sifive_fe310_g000_prci_base>
2001101a:	87aa                	mv	a5,a0
2001101c:	fef42623          	sw	a5,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:13
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + offset));
20011020:	fd842703          	lw	a4,-40(s0)
20011024:	fec42783          	lw	a5,-20(s0)
20011028:	97ba                	add	a5,a5,a4
2001102a:	439c                	lw	a5,0(a5)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:14
}
2001102c:	853e                	mv	a0,a5
2001102e:	50b2                	lw	ra,44(sp)
20011030:	5422                	lw	s0,40(sp)
20011032:	6145                	addi	sp,sp,48
20011034:	8082                	ret

20011036 <__metal_driver_sifive_fe310_g000_prci_set_reg>:
__metal_driver_sifive_fe310_g000_prci_set_reg():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:16

long __metal_driver_sifive_fe310_g000_prci_set_reg(const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset, long value) {
20011036:	7179                	addi	sp,sp,-48
20011038:	d606                	sw	ra,44(sp)
2001103a:	d422                	sw	s0,40(sp)
2001103c:	1800                	addi	s0,sp,48
2001103e:	fca42e23          	sw	a0,-36(s0)
20011042:	fcb42c23          	sw	a1,-40(s0)
20011046:	fcc42a23          	sw	a2,-44(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:17
    unsigned long base = __metal_driver_sifive_fe310_g000_prci_base();
2001104a:	3775                	jal	20010ff6 <__metal_driver_sifive_fe310_g000_prci_base>
2001104c:	87aa                	mv	a5,a0
2001104e:	fef42623          	sw	a5,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:18
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + offset)) = value;
20011052:	fd842703          	lw	a4,-40(s0)
20011056:	fec42783          	lw	a5,-20(s0)
2001105a:	97ba                	add	a5,a5,a4
2001105c:	873e                	mv	a4,a5
2001105e:	fd442783          	lw	a5,-44(s0)
20011062:	c31c                	sw	a5,0(a4)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:19
}
20011064:	853e                	mv	a0,a5
20011066:	50b2                	lw	ra,44(sp)
20011068:	5422                	lw	s0,40(sp)
2001106a:	6145                	addi	sp,sp,48
2001106c:	8082                	ret

2001106e <_metal_clock_call_all_callbacks>:
_metal_clock_call_all_callbacks():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/metal/clock.h:48
typedef struct _metal_clock_callback_t metal_clock_callback;

/*!
 * @brief Call all callbacks in the linked list, if any are registered
 */
__inline__ void _metal_clock_call_all_callbacks(const metal_clock_callback *const list) {
2001106e:	7179                	addi	sp,sp,-48
20011070:	d606                	sw	ra,44(sp)
20011072:	d422                	sw	s0,40(sp)
20011074:	1800                	addi	s0,sp,48
20011076:	fca42e23          	sw	a0,-36(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/metal/clock.h:49
    const metal_clock_callback *current = list;
2001107a:	fdc42783          	lw	a5,-36(s0)
2001107e:	fef42623          	sw	a5,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/metal/clock.h:50
    while (current) {
20011082:	a831                	j	2001109e <_metal_clock_call_all_callbacks+0x30>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/metal/clock.h:51
        current->callback(current->priv);
20011084:	fec42783          	lw	a5,-20(s0)
20011088:	4398                	lw	a4,0(a5)
2001108a:	fec42783          	lw	a5,-20(s0)
2001108e:	43dc                	lw	a5,4(a5)
20011090:	853e                	mv	a0,a5
20011092:	9702                	jalr	a4
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/metal/clock.h:52
        current = current->_next;
20011094:	fec42783          	lw	a5,-20(s0)
20011098:	479c                	lw	a5,8(a5)
2001109a:	fef42623          	sw	a5,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/metal/clock.h:50
    while (current) {
2001109e:	fec42783          	lw	a5,-20(s0)
200110a2:	f3ed                	bnez	a5,20011084 <_metal_clock_call_all_callbacks+0x16>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/metal/clock.h:54
    }
}
200110a4:	0001                	nop
200110a6:	50b2                	lw	ra,44(sp)
200110a8:	5422                	lw	s0,40(sp)
200110aa:	6145                	addi	sp,sp,48
200110ac:	8082                	ret

200110ae <metal_clock_get_rate_hz>:
metal_clock_get_rate_hz():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/metal/clock.h:105
 * @brief Returns the current rate of the given clock
 *
 * @param clk The handle for the clock
 * @return The current rate of the clock in Hz
 */
__inline__ long metal_clock_get_rate_hz(const struct metal_clock *clk) { return clk->vtable->get_rate_hz(clk); }
200110ae:	1101                	addi	sp,sp,-32
200110b0:	ce06                	sw	ra,28(sp)
200110b2:	cc22                	sw	s0,24(sp)
200110b4:	1000                	addi	s0,sp,32
200110b6:	fea42623          	sw	a0,-20(s0)
200110ba:	fec42783          	lw	a5,-20(s0)
200110be:	439c                	lw	a5,0(a5)
200110c0:	439c                	lw	a5,0(a5)
200110c2:	fec42503          	lw	a0,-20(s0)
200110c6:	9782                	jalr	a5
200110c8:	87aa                	mv	a5,a0
200110ca:	853e                	mv	a0,a5
200110cc:	40f2                	lw	ra,28(sp)
200110ce:	4462                	lw	s0,24(sp)
200110d0:	6105                	addi	sp,sp,32
200110d2:	8082                	ret

200110d4 <metal_clock_set_rate_hz>:
metal_clock_set_rate_hz():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/metal/clock.h:122
 *
 * Prior to and after the rate change of the clock, this will call the registered
 * pre- and post-rate change callbacks.
 */
__inline__ long metal_clock_set_rate_hz(struct metal_clock *clk, long hz)
{
200110d4:	7179                	addi	sp,sp,-48
200110d6:	d606                	sw	ra,44(sp)
200110d8:	d422                	sw	s0,40(sp)
200110da:	1800                	addi	s0,sp,48
200110dc:	fca42e23          	sw	a0,-36(s0)
200110e0:	fcb42c23          	sw	a1,-40(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/metal/clock.h:123
    _metal_clock_call_all_callbacks(clk->_pre_rate_change_callback);
200110e4:	fdc42783          	lw	a5,-36(s0)
200110e8:	43dc                	lw	a5,4(a5)
200110ea:	853e                	mv	a0,a5
200110ec:	3749                	jal	2001106e <_metal_clock_call_all_callbacks>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/metal/clock.h:125

    long out = clk->vtable->set_rate_hz(clk, hz);
200110ee:	fdc42783          	lw	a5,-36(s0)
200110f2:	439c                	lw	a5,0(a5)
200110f4:	43dc                	lw	a5,4(a5)
200110f6:	fd842583          	lw	a1,-40(s0)
200110fa:	fdc42503          	lw	a0,-36(s0)
200110fe:	9782                	jalr	a5
20011100:	fea42623          	sw	a0,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/metal/clock.h:127

    _metal_clock_call_all_callbacks(clk->_post_rate_change_callback);
20011104:	fdc42783          	lw	a5,-36(s0)
20011108:	479c                	lw	a5,8(a5)
2001110a:	853e                	mv	a0,a5
2001110c:	378d                	jal	2001106e <_metal_clock_call_all_callbacks>
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/metal/clock.h:129

    return out;
2001110e:	fec42783          	lw	a5,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/metal/clock.h:130
}
20011112:	853e                	mv	a0,a5
20011114:	50b2                	lw	ra,44(sp)
20011116:	5422                	lw	s0,40(sp)
20011118:	6145                	addi	sp,sp,48
2001111a:	8082                	ret

2001111c <metal_shutdown>:
metal_shutdown():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
2001111c:	1101                	addi	sp,sp,-32
2001111e:	ce22                	sw	s0,28(sp)
20011120:	1000                	addi	s0,sp,32
20011122:	fea42623          	sw	a0,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20011126:	0001                	nop
20011128:	bffd                	j	20011126 <metal_shutdown+0xa>

2001112a <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:178
{
2001112a:	1101                	addi	sp,sp,-32
2001112c:	ce22                	sw	s0,28(sp)
2001112e:	1000                	addi	s0,sp,32
20011130:	fea42623          	sw	a0,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:179
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
20011134:	fec42703          	lw	a4,-20(s0)
20011138:	800007b7          	lui	a5,0x80000
2001113c:	06078793          	addi	a5,a5,96 # 80000060 <__global_pointer$+0xfffff7a8>
20011140:	00f71763          	bne	a4,a5,2001114e <__metal_driver_fixed_clock_rate+0x24>
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:180
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
20011144:	00f427b7          	lui	a5,0xf42
20011148:	40078793          	addi	a5,a5,1024 # f42400 <DELAY+0xf3a400>
2001114c:	a099                	j	20011192 <__metal_driver_fixed_clock_rate+0x68>
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:182
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_2) {
2001114e:	fec42703          	lw	a4,-20(s0)
20011152:	800007b7          	lui	a5,0x80000
20011156:	06c78793          	addi	a5,a5,108 # 8000006c <__global_pointer$+0xfffff7b4>
2001115a:	00f71763          	bne	a4,a5,20011168 <__metal_driver_fixed_clock_rate+0x3e>
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:183
		return METAL_FIXED_CLOCK_2_CLOCK_FREQUENCY;
2001115e:	044aa7b7          	lui	a5,0x44aa
20011162:	20078793          	addi	a5,a5,512 # 44aa200 <DELAY+0x44a2200>
20011166:	a035                	j	20011192 <__metal_driver_fixed_clock_rate+0x68>
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:185
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_5) {
20011168:	fec42703          	lw	a4,-20(s0)
2001116c:	800007b7          	lui	a5,0x80000
20011170:	07878793          	addi	a5,a5,120 # 80000078 <__global_pointer$+0xfffff7c0>
20011174:	00f71463          	bne	a4,a5,2001117c <__metal_driver_fixed_clock_rate+0x52>
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:186
		return METAL_FIXED_CLOCK_5_CLOCK_FREQUENCY;
20011178:	67a1                	lui	a5,0x8
2001117a:	a821                	j	20011192 <__metal_driver_fixed_clock_rate+0x68>
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:188
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_6) {
2001117c:	fec42703          	lw	a4,-20(s0)
20011180:	800007b7          	lui	a5,0x80000
20011184:	08478793          	addi	a5,a5,132 # 80000084 <__global_pointer$+0xfffff7cc>
20011188:	00f71463          	bne	a4,a5,20011190 <__metal_driver_fixed_clock_rate+0x66>
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:189
		return METAL_FIXED_CLOCK_6_CLOCK_FREQUENCY;
2001118c:	67a1                	lui	a5,0x8
2001118e:	a011                	j	20011192 <__metal_driver_fixed_clock_rate+0x68>
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:192
		return 0;
20011190:	4781                	li	a5,0
/home/yon/wsFreedomStudio/GiveMe5/bsp/build/debug/./metal/machine.h:194
}
20011192:	853e                	mv	a0,a5
20011194:	4472                	lw	s0,28(sp)
20011196:	6105                	addi	sp,sp,32
20011198:	8082                	ret

2001119a <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
2001119a:	1101                	addi	sp,sp,-32
2001119c:	ce06                	sw	ra,28(sp)
2001119e:	cc22                	sw	s0,24(sp)
200111a0:	1000                	addi	s0,sp,32
200111a2:	fea42623          	sw	a0,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
200111a6:	fec42503          	lw	a0,-20(s0)
200111aa:	3741                	jal	2001112a <__metal_driver_fixed_clock_rate>
200111ac:	87aa                	mv	a5,a0
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/fixed-clock.c:15
}
200111ae:	853e                	mv	a0,a5
200111b0:	40f2                	lw	ra,28(sp)
200111b2:	4462                	lw	s0,24(sp)
200111b4:	6105                	addi	sp,sp,32
200111b6:	8082                	ret

200111b8 <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
200111b8:	1101                	addi	sp,sp,-32
200111ba:	ce06                	sw	ra,28(sp)
200111bc:	cc22                	sw	s0,24(sp)
200111be:	1000                	addi	s0,sp,32
200111c0:	fea42623          	sw	a0,-20(s0)
200111c4:	feb42423          	sw	a1,-24(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
200111c8:	fec42503          	lw	a0,-20(s0)
200111cc:	37f9                	jal	2001119a <__metal_driver_fixed_clock_get_rate_hz>
200111ce:	87aa                	mv	a5,a0
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/src/drivers/fixed-clock.c:20
}
200111d0:	853e                	mv	a0,a5
200111d2:	40f2                	lw	ra,28(sp)
200111d4:	4462                	lw	s0,24(sp)
200111d6:	6105                	addi	sp,sp,32
200111d8:	8082                	ret

200111da <_exit>:
_exit():
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
200111da:	1101                	addi	sp,sp,-32
200111dc:	ce06                	sw	ra,28(sp)
200111de:	cc22                	sw	s0,24(sp)
200111e0:	1000                	addi	s0,sp,32
200111e2:	fea42623          	sw	a0,-20(s0)
/home/yon/wsFreedomStudio/GiveMe5/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
200111e6:	fec42503          	lw	a0,-20(s0)
200111ea:	3f0d                	jal	2001111c <metal_shutdown>
